<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Legrandk&#39;s Qzone</title>
  
  
  <link href="https://blog.legr4ndk.top/atom.xml" rel="self"/>
  
  <link href="https://blog.legr4ndk.top/"/>
  <updated>2020-11-27T15:35:25.905Z</updated>
  <id>https://blog.legr4ndk.top/</id>
  
  <author>
    <name>Legrandk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>于深夜注入怨念</title>
    <link href="https://blog.legr4ndk.top/2020/11/27/Essay2/"/>
    <id>https://blog.legr4ndk.top/2020/11/27/Essay2/</id>
    <published>2020-11-27T15:23:06.000Z</published>
    <updated>2020-11-27T15:35:25.905Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我们大学牲到了期中就是忙啊啊！</strong></p><p>数数看我最近肝了多少DDL啊：</p><ul><li>认识实习结课，写实习体验报告，800字*3篇</li><li>认识实习成国展示ppt</li><li>大学生职业规划的人物生涯访谈</li><li>物原的研讨，做材料，讲ppt</li><li>形势与政策的结课论文</li><li>毛概的期中演讲，有关美国大选</li><li>中国传统文化的红楼家宴设计报告</li><li>第二外语的日语自我介绍文本</li><li>复习概率论以及期中考试</li><li>数字电路课程设计的两篇实验报告</li></ul><p>即将到来的还有</p><ul><li>计算机导论的课堂presentation</li><li>概率论拖了两周的作业</li><li>数不清的要学的CS内容</li><li>创新实践的MindSpore框架以及Java后端开发</li></ul><hr><p>大学搞这些倒不是说嫌烦，只是这些天一直在忙忙碌碌中度过，生活节奏快了很多很多，人也变得逐渐嗜睡了起来，经常丢三落四。上数电课程设计课的时候还把我的钥匙串丢在了实验室。这最近两周经常不吃早饭，午饭也随便凑合，晚上无论多早睡，第二天都得靠泡的一杯浓茶吊着一口仙气直到下次上床，与朋友们的联系也少了起来。</p><p>最近看到好几个重点大学接连出现学生崩溃、猝死甚至自杀的事件。</p><p>唉，现在这么卷，也许放开心态，不要那么拼才是呢。可是我放不下这口气。</p><p>最近看到一首很有感觉的诗，且放在这边吧：</p><blockquote><p>我把子弹穿破胸膛<br>我的眼睛被鲸鲨咬碎<br>口腔被灌满砒霜溃疡<br>双手砍断滚在床下<br>少女把头颅盛走<br>你就静静看着我<br>把我泡在福尔马林<br>永垂不朽</p></blockquote><p><strong>活在福尔马林里，也未尝不是永垂不朽。</strong></p><p>晚安。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;我们大学牲到了期中就是忙啊啊！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数数看我最近肝了多少DDL啊：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认识实习结课，写实习体验报告，800字*3篇&lt;/li&gt;
&lt;li&gt;认识实习成国展示ppt&lt;/li&gt;
&lt;li&gt;大学生职业规划的人物生涯访谈&lt;</summary>
      
    
    
    
    <category term="Essay" scheme="https://blog.legr4ndk.top/categories/Essay/"/>
    
    
    <category term="随想" scheme="https://blog.legr4ndk.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>马保国日语版脚本</title>
    <link href="https://blog.legr4ndk.top/2020/11/24/masensei/"/>
    <id>https://blog.legr4ndk.top/2020/11/24/masensei/</id>
    <published>2020-11-24T13:36:30.000Z</published>
    <updated>2020-11-27T10:51:57.507Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原视频见于<a href="https://www.bilibili.com/video/BV1QV411a75M">Bilibili</a></p><p>此处只是靠听力和字幕扒取了台词</p><p>——Just for fun</p></blockquote><p>こんにちは</p><p>俺は太極マスター</p><p>马保国</p><p>今　友達が「先生どうしたの」と</p><p>俺は「何が」と</p><p>写真がなん何枚来た</p><p>俺見たと</p><p>お！</p><p>それは昨日</p><p>二人の若もん</p><p>３０ぐらい</p><p>一人体重９０キロ</p><p>一人体重８０キロ</p><p>彼ら</p><p>一人</p><p>「俺はジムで運動、首がひねった、馬先生、太極を気功を、教えてくれない？」</p><p>俺は「いい」と</p><p>おれは「君の筋トレ效かない」</p><p>彼は不満</p><p>俺は「子供よ、両手で俺の指を折ってみ」</p><p>折れない</p><p>彼は「役立てない」と</p><p>俺は「役立てる」と</p><p>これ「化力」</p><p>カンフー技</p><p>四両で千斤を制する</p><p>２００斤の英国力士</p><p>俺の指に勝てない</p><p>あ！</p><p>彼はやってみみと</p><p>おれはオッケーと</p><p>そして彼ガーと立て</p><p>速いあ！</p><p>そして続いて</p><p>先ず左蹴</p><p>次右サイド</p><p>最後左ジャブ</p><p>俺全部ガードした</p><p>ガードしてもちろん伝統カンフーは</p><p>切磋だけ</p><hr><p>未完待续~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原视频见于&lt;a href=&quot;https://www.bilibili.com/video/BV1QV411a75M&quot;&gt;Bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此处只是靠听力和字幕扒取了台词&lt;/p&gt;
&lt;p&gt;——Just for fun&lt;/p&gt;
&lt;/b</summary>
      
    
    
    
    <category term="Essay" scheme="https://blog.legr4ndk.top/categories/Essay/"/>
    
    
    <category term="fun" scheme="https://blog.legr4ndk.top/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>C#常见控件</title>
    <link href="https://blog.legr4ndk.top/2020/11/22/CsharpCommonControls/"/>
    <id>https://blog.legr4ndk.top/2020/11/22/CsharpCommonControls/</id>
    <published>2020-11-22T10:48:47.000Z</published>
    <updated>2020-11-24T13:35:27.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>C#的WinForm编程真的是和Visual Basic一毛一样的体验</p><p>——比隔壁C++的WinForm不知道高到哪里去了（</p></blockquote><p><strong>控件（Control）是WinForm的基本元素</strong></p><h3 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h3><p>Form控件有一个系统自动生成的一个类实例化的对象（默认叫Form1），该类自带Load事件的函数。此类定义于Form1.cs和Form1.Design.cs中。于Program.cs中另有Program.cs内定义了Main函数作为程序的起点。</p><p>常见的控件有几个基本共有的属性，如：</p><ul><li>Size：是一组共两个值，用于确定对象的宽度和高度</li><li>(Name)：相当于该对象在程序中的变量名</li><li>AutoSize：如果为True则可能造成控件某些维度的手动大小调整不可用</li><li>Location：是一组两个值，用于确定对象在窗体的位置(x,y)，窗体左上顶点为坐标原点，向右为+x，向下为+y</li></ul><h3 id="Label（标签）控件"><a href="#Label（标签）控件" class="headerlink" title="Label（标签）控件"></a>Label（标签）控件</h3><p>为控件和窗体的其它组成部分提供标识，通常用于提供描述性文字</p><p>Label控件由Label类描述，Label类继承自Control类，它在名字空间System.Windows.Forms中。</p><h4 id="Label常用属性"><a href="#Label常用属性" class="headerlink" title="Label常用属性"></a>Label常用属性</h4><ul><li>AutoElipsis：获取或者设定一个值，指示是否要在Label右边缘显示<strong>省略号</strong>表示文本超过指定长度，否则文本将被直接截断</li><li>AutoSize：获取或者设定一个值，指示是否自动调整控件大小以显示完整内容</li><li>BorderStyle：获取或设置控件的边框样式</li><li>Image：获取或设置显示在Label上的图像</li><li>Text：获取或设置与此控件相关联的文本，即显示在Label上的文本</li><li>TextAlign：获取或设置Label中文本的对齐方式</li></ul><h3 id="TextBox（文本框）控件"><a href="#TextBox（文本框）控件" class="headerlink" title="TextBox（文本框）控件"></a>TextBox（文本框）控件</h3><p>TextBox中的文本可以被编辑，而Label中的不行。</p><p>TextBox类所在的名字空间为System.Windows.Forms。</p><h4 id="TextBox常用属性"><a href="#TextBox常用属性" class="headerlink" title="TextBox常用属性"></a>TextBox常用属性</h4><ul><li>AcceptsReturn：获取或设置一个值，该值指示在多行TextBox控件中按Enter键时，是在控件中创建一行新文本还是激活窗体的默认按钮，比如用于选择按回车是输入完了还是换一行</li><li>AcceptsTab：获取或设置一个值，该值指示在多行TextBox控件中按Tab键时，是在控件中键入一个Tab字符还是按选项卡的顺序将焦点移动到下一个控件</li><li>BackColor：获取或设置控件的背景色</li><li>Focused：获取一个值，该值指示控件是否有输入焦点</li><li>Font：获取或设置控件显示的文字的字体</li><li>Multiline：获取或设置一个值，该值指示此控件是否为多行TextBox控件</li><li>PasswordChar：获取或设置字符，该字符用于屏蔽单行TextBox控件中的密码字符</li><li>ReadOnly：获取或设置一个值，该值指示文本框中的文本是否为只读</li><li>RightToLeft：获取或设置一个值，该值指示是否将控件的元素对齐以支持从右向左的字体的区域设置</li><li>SelectedText：获取或设置一个值，该值指示控件中当前选定的文本</li><li>Text：字符串，获取或设置TextBox中的当前文本</li><li>TextAlign：获取或设置控件中文本的对齐方式</li><li>TextLength：获取或设置控件中文本的长度</li><li>WordWrap：指示多行文本框控件在必要时是否自动换行到下一行开始</li></ul><h4 id="TextBox常用事件"><a href="#TextBox常用事件" class="headerlink" title="TextBox常用事件"></a>TextBox常用事件</h4><ul><li>Click：鼠标单击控件时发生</li><li>Enter：鼠标进入控件区域时发生</li><li>GotFocus：在控件得到焦点时发生</li><li>KeyDown：在控件有焦点时按下按键时发生</li><li>KeyUp：在控件有焦点时释放按键时发生</li><li>Leave：在控件失去焦点时发生</li><li>LostFocus：在控件失去焦点时发生</li><li>TextChanged：在控件的Text属性值更改时发生（文本被改变</li></ul><h3 id="Button（按钮）控件"><a href="#Button（按钮）控件" class="headerlink" title="Button（按钮）控件"></a>Button（按钮）控件</h3><p>用户可以单击按钮控件触发程序动作。</p><p>Button继承自ButtonBase类，ButtonBase继承自ContentControl类，ContentControl类继承自Control类。</p><h4 id="Button常用属性"><a href="#Button常用属性" class="headerlink" title="Button常用属性"></a>Button常用属性</h4><ul><li>ClickMode：获取或设置Click事件何时发生，ClickMode有3种<ul><li>悬停，鼠标悬停在该按钮上时激发此按钮</li><li>按下，鼠标在该按钮上按下时激发此按钮</li><li>释放，鼠标在该按钮上按下后，释放时激发此按钮</li></ul></li><li>IsCancel：获取或设置一个值，指示该Button控件是否为取消按钮。用户可以通过ESC键激活取消按钮</li><li>IsDefault：获取或设置一个值，指示该Button控件是否为默认按钮。用户可以通过Enter键调用默认按钮</li></ul><h4 id="Button常用事件"><a href="#Button常用事件" class="headerlink" title="Button常用事件"></a>Button常用事件</h4><ul><li>Click：按钮被按下时发生（最常用）</li></ul><h3 id="选项控件"><a href="#选项控件" class="headerlink" title="选项控件"></a>选项控件</h3><p>选项的作用是跟据用户的实际情况在程序运行时调整程序的状态或行为。</p><h4 id="选项控件的分类"><a href="#选项控件的分类" class="headerlink" title="选项控件的分类"></a>选项控件的分类</h4><ul><li>GroupBox（组框）</li><li>Panel（面板）</li><li>RadioButton（单选按钮）</li><li>CheckBox（复选框）</li></ul><h4 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h4><p>RadioButton（单选按钮）控件是用来让用户在一组选项中选定一项且只能选定一项。</p><p>若窗体内仅有一组RadioButton控件时，可以将它们直接放置在这个窗体内。</p><p>当有两组或多组选项时，RadioButton应该被放置到一个GroupBox（组框）控件内进行分组。</p><h5 id="RadioButton常用属性"><a href="#RadioButton常用属性" class="headerlink" title="RadioButton常用属性"></a>RadioButton常用属性</h5><ul><li>Text：设定该RadioButton旁边的文本内容</li><li>CheckAlign：设定控件按钮与文本的位置关系（对齐方式）</li><li>Checked：由它设定RadioButton的状态（bool类型，True-被选中，False-未被选中（缺省设置））</li></ul><h5 id="RadioButton常用事件"><a href="#RadioButton常用事件" class="headerlink" title="RadioButton常用事件"></a>RadioButton常用事件</h5><ul><li><p>CheckedChanged：Checked属性改变时发生（默认事件）</p><p><strong>在VS中，双击单选按钮控件，会自动添加默认事件的事件处理函数</strong></p></li></ul><h4 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h4><p>ChechBox（复选框）控件是让用户在一组选项中选定一项或多项。</p><p>若窗体内仅有一组CheckBox控件时，可以将它们直接放置在这个窗体内。</p><p>当有两组或多组选项时，CheckBox应该被放置到一个GroupBox（组框）控件内进行分组。</p><h5 id="CheckBox常用属性"><a href="#CheckBox常用属性" class="headerlink" title="CheckBox常用属性"></a>CheckBox常用属性</h5><ul><li>Text：设定该CheckBox旁边的文本内容</li><li>CheckAlign：设定控件按钮与文本的位置关系（对齐方式）</li><li>Checked：由它设定CheckBox的状态（bool类型，True-被选中，False-未被选中（缺省设置））</li><li>CheckState：指示CheckBox目前的状态，有三个取值<ul><li>Checked：表示被选中状态</li><li>Unchecked，表示未被选中状态</li><li>Indeterminate，表示不可用状态（此状态当ThreeState属性为True时有效）</li></ul></li></ul><h5 id="CheckBox常用事件"><a href="#CheckBox常用事件" class="headerlink" title="CheckBox常用事件"></a>CheckBox常用事件</h5><ul><li>CheckedChanged：Checked属性改变时发生（默认事件）</li><li>CheckedStateChanged：CheckedState属性改变时发生</li></ul><h4 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h4><p>GroupBox（组框）是一个容器类控件。</p><p>你可以将一组控件放入GroupBox来分类。</p><p>组框可以显示标题（文本），但是它没有滚动条。</p><p>边框一般比较细。</p><h5 id="GroupBox常用属性"><a href="#GroupBox常用属性" class="headerlink" title="GroupBox常用属性"></a>GroupBox常用属性</h5><ul><li>Controls：组框包含的控件集</li><li>Text：在组框顶部显示的标题文本</li></ul><h4 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h4><p>Panel（面板）与GroupBox类似，也是一个容器类控件。</p><p>你也可以将一组控件放入Panel来分类。</p><p>面板可以包含滚动条，但是它没有标题。</p><p>边框可以通过相关边框属性来调节。</p><h5 id="Panel常用属性"><a href="#Panel常用属性" class="headerlink" title="Panel常用属性"></a>Panel常用属性</h5><ul><li>AutoScroll：当面板由于太小而无法显示所有控件时，这个属性指定是否出现滚动条，默认值为False</li><li>BorderStyle：设置面板的边界样式，默认为None，其他选项有Fixed3D和FixedSingle</li><li>Controls：面板包含的控件集</li></ul><hr><p><strong>待续~</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;C#的WinForm编程真的是和Visual Basic一毛一样的体验&lt;/p&gt;
&lt;p&gt;——比隔壁C++的WinForm不知道高到哪里去了（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;控件（Control）是WinForm的基本元素&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://blog.legr4ndk.top/categories/Programming/"/>
    
    
    <category term="C#" scheme="https://blog.legr4ndk.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Cpp中的多态</title>
    <link href="https://blog.legr4ndk.top/2020/10/23/CppPolymorphism/"/>
    <id>https://blog.legr4ndk.top/2020/10/23/CppPolymorphism/</id>
    <published>2020-10-23T12:02:51.000Z</published>
    <updated>2020-10-23T13:41:34.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>多态是面向对象编程内极为重要的一种特征，它能极大的简化我们的代码</p></blockquote><p>先来看一段类的原型</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> //基类</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Voiceless&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//不知道该叫啥</span><br>    &#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal <span class="hljs-comment">//狗派生类，继承了Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//汪汪叫</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal <span class="hljs-comment">//猫派生类，继承了Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Meow&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//喵喵叫</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们可以看到，基类和派生类中都有函数voice()，它可以让不同的动物发出不同的叫声，其中，Dog类和Cat类的voice()函数是覆写了基类中的同名函数。</p><p>当然，还可以有很多基于Animal类的派生类，都可以有叫声，但是我们如果想统一一下让它们叫的方法，比如用个train函数，传入对象或者它的指针就可以自动调用它的voice函数。虽然Cpp支持重载函数，但是为每个不同的类各写一个这样的函数，工作量不仅大，而且枯燥。多态就是帮我们解决这个问题的。</p><p><strong>多态</strong> <em>Polymorphism</em></p><p>表现方式有两种</p><ul><li>重载多态，比如函数重载（本文不介绍了），属于静态联编</li><li>子类型多态，属于动态联编，就是我接下来要说的那些</li></ul><p>子类型多态有两个要点：</p><ol><li>虚函数</li><li>函数覆写<sub>override</sub></li></ol><p>我们来区分涉及继承链情况下的两种联编：</p><ol><li>通过派生类对象访问同名函数，是静态联编</li><li>通过基类对象的指针访问同名函数，是静态联编</li><li>通过基类对象的指针或引用访问同名虚函数，是动态联编</li></ol><p>那我们现在改一下原来的类的定义让它符合子类型多态的要求</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-comment">//此函数声明为虚函数后，派生类中无须再注明</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Voiceless&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> <span class="hljs-comment">//覆写了voice函数</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> <span class="hljs-comment">//覆写了voice函数</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Meow&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>那么还是刚刚那个例子，我们设计一个train函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train</span><span class="hljs-params">(Animal animal)</span></span><br><span class="hljs-function"></span>&#123;<br>    animal.voice();<br>&#125;<br></code></pre></td></tr></table></figure><p>使用这个函数，你会发现无论你往参数里塞了什么阿猫阿狗的对象，输出的永远是“Voiceless”，这便是静态联编的问题了，它使用的是基类的对象而非基类对象的指针或引用，你需要把train修改成这样：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train</span><span class="hljs-params">(Animal&amp; animal)</span></span><br><span class="hljs-function"></span>&#123;<br>    animal.voice();<br>&#125;<br><span class="hljs-comment">//或者这样</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train</span><span class="hljs-params">(Animal* animal)</span></span><br><span class="hljs-function"></span>&#123;<br>    animal-&gt;voice();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后你的子类对象在调用这个train函数之后就可以正常发出正确的声音了</p><p><strong>需要注意的是，如果voice函数不是<em>虚函数</em>，那么即使你用了派生类对象的指针、引用，只要那个进入函数的东西的类型是基类，它就会调用基类的函数</strong></p><p>一句话总结一下，就是：<strong>函数虚，看对象；函数实，看类型。</strong></p><p>但是，这个东西它也有问题，就是你使用基类的指针（或者引用）指向了派生类的对象的时候，你只能调用派生类的虚函数，无法调用非虚函数，例如我改一下Dog类的定义：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">//这个不是虚函数了</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Foo!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是我在main函数里这样定义：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">Animal ptr;<br>Dog dog = <span class="hljs-keyword">new</span> Dog();<br>ptr = &amp;dog;<br>ptr-&gt;voice(); <span class="hljs-comment">//调用的是dog对象的voice函数</span><br>ptr-&gt;foo(); <span class="hljs-comment">//无法调用，No member named foo in Animal</span><br></code></pre></td></tr></table></figure><p>Animal类的指针虽然指向了dog，但是它将无法调用dog的非虚函数，但是如果我们偏要调用属于子类的非虚函数呢？</p><p><strong>Introducing dynamic_cast!</strong></p><p>Cpp的dynamic_cast&lt;&gt;运算符可以把基类类型的指针转换为派生类的类型的指针，就可以使调用子类的非虚函数称为可能，方法如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">ptr-&gt;foo(); <span class="hljs-comment">//它出了问题</span><br><span class="hljs-keyword">dynamic_cast</span>&lt;Dog*&gt;(ptr)-&gt;foo(); <span class="hljs-comment">//正常调用！</span><br></code></pre></td></tr></table></figure><p>虽然建议在任何基类与派生类间的指针、引用的类型转换都使用dynamic_cast运算符，但是实际上，派生类的指针（引用）转为基类类型的指针（引用）可以不使用该运算符而隐式转换，而基类的指针（引用）转为派生类类型的指针（引用）<strong>必须</strong>显式使用该运算符以完成类型转换。</p><p>比如我们有：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">Animal animal;<br>Animal* pa;<br>Cat cat;<br>Cat* pc;<br><br>pa = &amp;cat; <span class="hljs-comment">//可以隐式转换（下转上）</span><br>pc = <span class="hljs-keyword">dynamic_cast</span>&lt;Cat*&gt;(animal); <span class="hljs-comment">//必须显式转换（上转下）</span><br></code></pre></td></tr></table></figure><p>多态就先写这么多~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;多态是面向对象编程内极为重要的一种特征，它能极大的简化我们的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来看一段类的原型&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code</summary>
      
    
    
    
    <category term="C/C++" scheme="https://blog.legr4ndk.top/categories/C-C/"/>
    
    
    <category term="C/C++" scheme="https://blog.legr4ndk.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法教程</title>
    <link href="https://blog.legr4ndk.top/2020/10/18/MarkdownCourse/"/>
    <id>https://blog.legr4ndk.top/2020/10/18/MarkdownCourse/</id>
    <published>2020-10-18T14:11:22.000Z</published>
    <updated>2020-10-22T12:43:35.903Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章简单介绍下Markdown的基础语法，对写文章，记笔记有用</p><p>注意，Markdown排版支持大量html标签</p><hr># 大小标题（使用标题可以生成大纲）<p><strong>使用=和-标记一号和二号标题</strong></p><h1 id="我是大标题"><a href="#我是大标题" class="headerlink" title="我是大标题"></a>我是大标题</h1><h2 id="我是小标题"><a href="#我是小标题" class="headerlink" title="我是小标题"></a>我是小标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">我是大标题<br>=========<br>在第二行书写多个=，为一级标题<br>我是小标题<br>---------------<br>在第二行书写多个-，为二级标题<br></code></pre></td></tr></table></figure><p><strong>使用#标记1-6级标题</strong></p><h1 id="我是H1"><a href="#我是H1" class="headerlink" title="我是H1"></a>我是H1</h1><h2 id="我是H2"><a href="#我是H2" class="headerlink" title="我是H2"></a>我是H2</h2><h3 id="我是H3"><a href="#我是H3" class="headerlink" title="我是H3"></a>我是H3</h3><h4 id="我是H4"><a href="#我是H4" class="headerlink" title="我是H4"></a>我是H4</h4><h5 id="我是H5"><a href="#我是H5" class="headerlink" title="我是H5"></a>我是H5</h5><h6 id="我是H6"><a href="#我是H6" class="headerlink" title="我是H6"></a>我是H6</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 我是H1</span><br><span class="hljs-section">## 我是H2</span><br><span class="hljs-section">### 我是H3</span><br><span class="hljs-section">#### 我是H4</span><br><span class="hljs-section">##### 我是H5</span><br><span class="hljs-section">###### 我是H6</span><br>是几级标题就打几个#，再跟上一个空格<br></code></pre></td></tr></table></figure><h1 id="特殊格式"><a href="#特殊格式" class="headerlink" title="特殊格式"></a>特殊格式</h1><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><p><strong><em>我是斜粗体</em></strong></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*我是斜体*</span><br><span class="hljs-strong">**我是粗体**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*我是斜粗体<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">注意，星号可以用下划线替代</span></span></span></span><br></code></pre></td></tr></table></figure><p><strong>分割线</strong>，就像这样</p><hr><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">---</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">你需要使用连续三个及以上的星号、减号或者下划线来创建分割线，每个符号间可以有空格</span></span></span></span><br></code></pre></td></tr></table></figure><p><strong>下划线和删除线</strong></p><p><u>我是下划线</u></p><p><del>我是删除线</del></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>我是下划线<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br>~~我是删除线~~<br>下划线使用html的u标签实现，删除线在前后加上两个~即可<br></code></pre></td></tr></table></figure><p><strong>列表</strong></p><ul><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第三项</p></li></ul><ol><li><p>第一项</p></li><li><p>第二项</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br>无序列表使用星号（或者加号、减号）跟一个空格<br><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br>有序列表使用数字加一个小数点以跟一个空格<br></code></pre></td></tr></table></figure></li></ol><p><strong>区块</strong></p><blockquote><p>这是区块</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 这是区块</span><br>大于号加一个空格<br></code></pre></td></tr></table></figure><p><strong>代码块</strong></p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">这是代码块<br>​```[language]<br><span class="hljs-meta">#Codes here</span><br>​```<br>前后三个点包围的区块，第一块三个点后面可以跟上语言的名称<br></code></pre></td></tr></table></figure><p><strong>超链接</strong></p><p><a href="https://legr4ndk.github.io/">这是指向我的博客的超链接</a></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">这是指向我的博客的超链接</span>](<span class="hljs-link">https://legr4ndk.github.io/</span>)<br>方括号里是显示的字，小括号里是要跳转的链接<br>当然你也可以使用html的<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span></span>标签<br></code></pre></td></tr></table></figure><p><strong>图片</strong></p><p><img src="/.io//MarkdownCourse%5Ctest.jpg" alt="龙龙快动啊"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">龙龙快动啊</span>](<span class="hljs-link">MarkdownCourse\test.jpg</span>)<br>一个感叹号直接接中括号，里面是注释文本，后面跟的小括号里面是图片路径<br>当然你也可以使用html的<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span></span>标签<br></code></pre></td></tr></table></figure><p><strong>表格</strong></p><table><thead><tr><th>表头</th><th align="left">表头</th><th align="right">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td>单元格</td><td align="left">左对齐</td><td align="right">右对齐</td><td align="center">居中对齐</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">|  表头   | 表头  |  表头   | 表头  |<br>|  ----  | :----  |  ----:  | :----:  |<br>| 单元格  | 左对齐 | 右对齐  | 居中对齐 |<br>使用|来分割单元格，使用-来分割表头和其他行，使用:来确定当列的对齐方式<br>使用html的<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span>标签也可以做到<br></code></pre></td></tr></table></figure><hr>够你喝一壶了！]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章简单介绍下Markdown的基础语法，对写文章，记笔记有用&lt;/p&gt;
&lt;p&gt;注意，Markdown排版支持大量html标签&lt;/p&gt;
&lt;hr&gt;
# 大小标题（使用标题可以生成大纲）

&lt;p&gt;&lt;strong&gt;使用=和-标记一号和二号标题&lt;/strong&gt;&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="Programming" scheme="https://blog.legr4ndk.top/categories/Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>用Hexo配合GitHub快速上线自己的个人博客</title>
    <link href="https://blog.legr4ndk.top/2020/10/18/HexoCourse/"/>
    <id>https://blog.legr4ndk.top/2020/10/18/HexoCourse/</id>
    <published>2020-10-18T09:05:41.000Z</published>
    <updated>2020-10-18T11:28:24.855Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不想买服务器却又想创造属于自己的网站？Hexo可以帮你。</p></blockquote><h2 id="啥是Hexo"><a href="#啥是Hexo" class="headerlink" title="啥是Hexo"></a>啥是Hexo</h2><p><strong>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</strong></p><p>本教程可以让你快速上线属于你自己的博客。</p><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><p>你需要安装两个东西：Git和Node.js</p><p>Git的安装教程<a href="https://legr4ndk.github.io/2020/10/16/GitPushBriefIntroduction/#Install-git-may-need-root-permission">在这儿</a>。</p><p>Node.js可以直接<a href="https://nodejs.org/zh-cn/">在这儿</a>下载，不要忘记把它加到环境变量中去。</p><p>安装完之后可以在命令行中输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ git --version #输入这个，下面是显示的内容<br>git version 2.28.0.windows.1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ npm --version #输入这个，下面是显示的内容<br>6.14.8<br></code></pre></td></tr></table></figure><p>如果均有回显版本号（可能你的版本和我的不一样），那么就说明安装成功了。</p><p>接下来因为要用到npm这个包管理器，所以先给npm的镜像站点换成国内的淘宝源，命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>然后准备工作就全部完成了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>需要以下几个命名，按顺序执行就行了：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ npm install hexo -g #安装hexo<br>➜ npm install hexo-deployer-git --save #安装hexo的一个插件包，用于Git部署<br></code></pre></td></tr></table></figure><p>安装完之后，你需要建立一个文件夹专门用来存放你的博客的文件，然后打开那个文件夹，在该文件夹里打开命令行窗口（Windows用户可以选择通过按住Shift并在文件夹窗口空白地区右键来打开PowerShell），现在需要初始化你的网站，命令行输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo init #初始化hexo站点，init=initialize<br></code></pre></td></tr></table></figure><p>此命令会从远程仓库克隆基础的Hexo站点模板，视你的网络条件（你懂）此过程可能持续数分钟，然后你的文件夹里会多很多文件，主文件夹结构大致如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">├─node_modules #太大了不展开了<br>├─scaffolds<br>├─source #要展示在网页上的资源文件<br>│  └─_posts #存放博客内的博文和媒体文件，博文以markdown存储<br>└─themes #存放主题文件，自带一个landscape主题，此处以它为例，如果要用其他主题也请放入这边<br>    └─landscape #主题存放文件夹，此处有主题的配置文件_config.yml<br>        ├─languages<br>        ├─layout<br>        │  ├─_partial<br>        │  │  └─post<br>        │  └─_widget<br>        ├─scripts<br>        └─source<br>            ├─css<br>            │  ├─fonts<br>            │  ├─images<br>            │  ├─_partial<br>            │  └─_util<br>            ├─fancybox<br>            │  └─helpers<br>            └─js<br></code></pre></td></tr></table></figure><p>然后，你可以在命令行执行以下语句来清理已有网站内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo clean<br></code></pre></td></tr></table></figure><h2 id="正式使用Hexo"><a href="#正式使用Hexo" class="headerlink" title="正式使用Hexo"></a>正式使用Hexo</h2><p>先介绍几个Hexo使用的基本命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo generate #或者 hexo g，用来跟据你写好的md博文生成新的网页文件并链接<br>➜ hexo server #或者hexo s,用于在本地的4000端口（127.0.0.1:4000）实时预览你的网页<br>➜ hexo new &#x27;xxx&#x27; #新建博文，会在主文件夹/source/_posts文件夹下创建xxx.md与同名媒体文件夹<br></code></pre></td></tr></table></figure><p>编辑博文请在md文件内，博文的资源文件（如图片）请放到同名文件夹中并在md文件中使用相对地址链接来完成（比如./xxx/233.jpg)。</p><p><strong>——————那么做到这步我就假定你已经在刚刚生成的.md文件中写完文章了——————</strong></p><h2 id="部署Hexo博客到GitHub"><a href="#部署Hexo博客到GitHub" class="headerlink" title="部署Hexo博客到GitHub"></a>部署Hexo博客到GitHub</h2><p>毫无疑问你得先注册个GitHub，如果还没有的话，<a href="https://github.com/">点这里去注册</a>。</p><p>然后新建一个仓库，注意这个仓库必须是开源的，而且名字有一定要求：<strong>必须是 用户名.github.io</strong></p><p>例如我的GitHub的id是legr4ndk，那么我的仓库名就是legr4ndk.github.io。</p><p>新建仓库之后，你可以在仓库里找到你仓库的链接，就像这样：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/YourGithubID/</span>YourRepoName.git<br></code></pre></td></tr></table></figure><p>然后打开你的本地Hexo文件夹，有个_config.yml文件（注意不是主题文件夹里的那个），使用你的代码编辑器打开它，划到最下面有个deploy标签，你需要编辑一下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs _config.yml">#原来是这样的<br>deploy:<br>  type: &#39;&#39;<br>  <br>#你需要把它改成<br>deploy:<br>  type: &#39;git&#39;<br>  repository: https:&#x2F;&#x2F;github.com&#x2F;YourGithubID&#x2F;YourRepoName.git #这边写的是你的仓库链接，我这个只是范例<br> <br> #注意冒号之后有空格<br></code></pre></td></tr></table></figure><p>第16行还有个标签叫url，你需要把后面的值改成你的仓库名称，比如这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs _config.yml">url: http:&#x2F;&#x2F;YourGithubID.github.io<br></code></pre></td></tr></table></figure><p>然后保存即可。</p><p>在部署前你必须使用<strong>hexo g</strong>重新生成网页文件。你可以运行<strong>hexo s</strong>命令先在本地检查你的网站还有没有问题。</p><p>部署使用一个命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo deploy #或者hexo d，把本地生成的文件部署到GitHub上<br></code></pre></td></tr></table></figure><p>如果你是第一次在命令行上面使用GitHub，那么将会有一个弹窗要求你登录你的GitHub，之后，你的网站将会被推送到GitHub上。过几分钟你就可以通过你的仓库名作为URL访问你的网站了。比如我的网站的地址就是<a href="https://legr4ndk.github.io/">legr4ndk.github.io</a>。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>GitHub因为国内特殊环境可能出现无法访问，这个需要魔法上网。</li><li>每次deploy之后都需要几分钟后才能刷新观察到变化，切勿心急</li><li>每次写完新文章或者更换主题什么的之后，必须使用<em>hexo g</em>重新生成文件之后再部署</li><li>主题可以去<a href="https://hexo.io/themes/">这里</a>寻找自己喜欢的，点击主题名字可以直接跳转主题的GitHub页面，跟据上面的教程安装即可。更改主题请去本地Hexo主文件夹的_config.yml内的theme标签更改。</li><li>主题内可能有部分依赖，建议换主题后在主题文件夹的命令行内运行<strong>npm install</strong>一键安装依赖（有的主题可能不行，建议查看主题的项目下的安装教程）。</li></ol><p>到此为止你已经可以上线一个基础的个人网站了，接下来就是跟据主题的README.md文件介绍的那样去自己订制网页了。</p><p>Have fun~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不想买服务器却又想创造属于自己的网站？Hexo可以帮你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;啥是Hexo&quot;&gt;&lt;a href=&quot;#啥是Hexo&quot; class=&quot;headerlink&quot; title=&quot;啥是Hexo&quot;&gt;&lt;/a&gt;啥是Hex</summary>
      
    
    
    
    <category term="Git" scheme="https://blog.legr4ndk.top/categories/Git/"/>
    
    
    <category term="git" scheme="https://blog.legr4ndk.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>脑袋里的胡思乱想</title>
    <link href="https://blog.legr4ndk.top/2020/10/17/Essay1/"/>
    <id>https://blog.legr4ndk.top/2020/10/17/Essay1/</id>
    <published>2020-10-17T13:19:02.000Z</published>
    <updated>2020-11-27T15:35:09.050Z</updated>
    
    <content type="html"><![CDATA[<p><em>越是了解一个人，就会越看到这个人产出的屎。</em></p><p>这是我在朋友的博客上看到的一句话，能看到这篇文章的应该都是些熟悉我的人，那么我便也如法炮制一下，在这边记录一波我产出的屎吧。</p><p>昨天有个学弟告诉我，他报名的两个学生组织类社团他全都落选了，他现在没社团进了该咋办。我虽然出发点不同，但我的现实情况其实和他有点相似。我一直是对学生组织类社团有些嗤之以鼻的，那些社团总会占用我大把的私人时间去做一些我认为无意义的活动，乃至高频次的聚餐和团建，说实话真让我这个“社恐”唯恐避之不及。再加上大一竞选班长的糟心事儿，我简直是快要彻底丧失了<strong>“为人民服务”</strong>的念头了。那个时候我也挺懊恼的，我说不来别人口里那种高大上的话，还有点办事不经夸。害，就这么去了好了。总之，我大一最后就参加了一个社团：IT俱乐部，这社团名字看起来似乎很“高大上”，本质上其实就是一个修电脑的社团。事情少，办实事，时间自由，正好符合我对社团的三大愿景。而且我其实也挺乐意帮同学解决电脑上的一些问题的，最后就留在了那边。其他的诸如轮滑社什么的，多少都因为过于频繁的社团活动把我劝退了。</p><p>现在想想，单一社团对我而言有利也有弊吧。我没参加很多社团，结果大一社团活动最密集那会我拿到了大把的时间去学习，在室友都忙着招新等事宜的时候，我在那边啃<em>C Primer Plus</em>，在朋友去参加社团聚餐的时候，我在学<em>蟒蛇书</em>，大一那会说实话是我大学以来学习新知识最快的时候。但是另一方面，和室友一起走出去上课的时候，他们总是会碰到认识的学长，然后我就一个人背着包在路上茫然，讶然于路上千万面孔却无一人为我所知。不得不说，大学的社团真的是扩展社交圈子的一个重要手段，有大一些的关系圈的话别的不说，消息是真的比我灵通太多了（苦笑），那些有关德育分、创新学分的活动，大部分是往往在我根本不知道它已经举行了的情况下错过了。【反观一下我的社交圈……似乎就周围原来玩的比较好的那几个人吧，出了周围几个寝室我就也没啥认识的人了😅】</p><p>靠！这么写起来人突然就开始丧了！大学读了一年还多了，除了拿了一点微薄的奖学金我也再没什么别的成就了，天天宅在寝室里，也没能认识到几个人，把自己关在自己的世界里，不想社交，不想谈对象。晚上的时候我也总是想我这样是不是太佛系了，但是这么反思有什么用呢？懒狗不想改变是一定不会去改变的，我想我可能需要一个契机【可能受点刺激什么的】，但是这个契机又会在什么时候出现呢。</p><p>害，这段话就当成我在这个博客放的第一个随笔吧。反正也是记录生活，写给自己看，高兴就好了！</p><p>我计划过几天出一次教程，内容是关于我是怎么建立起这个站点的。</p><p>嗷对，国庆节那会我非常巧妙的结实了一个新朋友，有机会的话我也会再写写和他的故事。</p><p>回见~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;越是了解一个人，就会越看到这个人产出的屎。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这是我在朋友的博客上看到的一句话，能看到这篇文章的应该都是些熟悉我的人，那么我便也如法炮制一下，在这边记录一波我产出的屎吧。&lt;/p&gt;
&lt;p&gt;昨天有个学弟告诉我，他报名的两个学生组织类社团他全都落选了</summary>
      
    
    
    
    <category term="Essay" scheme="https://blog.legr4ndk.top/categories/Essay/"/>
    
    
    <category term="随想" scheme="https://blog.legr4ndk.top/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>C语言数字、指针、布尔值灵活利用的典范</title>
    <link href="https://blog.legr4ndk.top/2020/10/17/TheCLanguageIsSoNB/"/>
    <id>https://blog.legr4ndk.top/2020/10/17/TheCLanguageIsSoNB/</id>
    <published>2020-10-16T16:12:19.000Z</published>
    <updated>2020-11-24T09:12:33.124Z</updated>
    
    <content type="html"><![CDATA[<p>先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。</p><p>实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样：</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) <span class="hljs-comment">//输出到最后一个数字了</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们利用一个if语句来判断是否输出到最后一个数字，来选择是否输出占位的空格。事实上，也可以对第一个数字特殊对待，然后剩余数据输出时附带一个空格。</p><p><strong>但是如果我们这么做呢：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span> + !i, arr[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>极其简单的几句话完成了我们之前要的操作，一气呵成。</p><p>我详细叙述下它的过程：</p><p>玄机在于printf语句的那个加法上。C语言的字符串常量作参数，实际上是一个指向常量池中该字符串的指针，也就是可以进行运算。然后就是一个!i，这是把C语言中的整型数据当布尔值来看待，对他取非。当循环第一趟时，i=0，0在C语言中是false，非i得到true，默认为1，当那个指针+1，指针就从原来的指向空格，变成指向“%d”，那么就不会输出空格。而当之后几轮时，i均为非0数，C语言中为true，那么取非则得到false，即0，那么原指针+0，就是它本身，也就会正常输出空格，最后达到我们的要求。</p><p>这种写法说实话有很大局限性，可读性也极差，但是却很好的体现了C语言的灵活之处。C语言对数据和内存的操作极为灵活，这就要求使用者有很高的水平。这种写法不推荐在正式的程序设计中使用，但是对于开拓思维、优化程序是很有帮助的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。&lt;/p&gt;
&lt;p&gt;实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="C/C++" scheme="https://blog.legr4ndk.top/categories/C-C/"/>
    
    
    <category term="C/C++" scheme="https://blog.legr4ndk.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Use git to push your code to your Github&#39;s repository</title>
    <link href="https://blog.legr4ndk.top/2020/10/16/GitPushBriefIntroduction/"/>
    <id>https://blog.legr4ndk.top/2020/10/16/GitPushBriefIntroduction/</id>
    <published>2020-10-16T15:45:05.000Z</published>
    <updated>2020-10-17T12:34:49.666Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>First things first,install git.</p><p>——Stop BBing if you have not even installed the git.</p></blockquote><h3 id="Install-git-may-need-root-permission"><a href="#Install-git-may-need-root-permission" class="headerlink" title="Install git(may need root permission)"></a>Install git(may need root permission)</h3><ul><li>Ubuntu/Debian/Deepin: <strong>apt install git</strong></li><li>Arch/Manjaro:<strong>pacman -S git</strong></li><li>Free BSD:<strong>pkg install git</strong></li><li>macOS:<strong>brew install git</strong></li><li>Windows:Click <a href="https://git-scm.com/downloads">HERE</a> to download the installer</li></ul><p>Run <strong>git –version</strong> to make sure that git is installed on your device.</p><h3 id="Put-your-codes-to-a-folder-and-initialize"><a href="#Put-your-codes-to-a-folder-and-initialize" class="headerlink" title="Put your codes to a folder and initialize"></a>Put your codes to a folder and initialize</h3><p>Now you can copy+paste all your code that need to be pushed to the Github in your new folder.Then run a terminal in this folder.</p><p>Using <strong>git init</strong> to initial your local repository.</p><p>And do not forget to add a new repository in your Github account.Once you added a new repository to your Github,you will get a repository-link just like this:</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/YourGithubID/</span>YourRepoName.git<br></code></pre></td></tr></table></figure><p>Now,run <strong>git remote add origin $YourRepoLink</strong> to link your remote repository to the local one.</p><h3 id="Add-your-files-to-staging-area"><a href="#Add-your-files-to-staging-area" class="headerlink" title="Add your files to staging area"></a>Add your files to staging area</h3><p>Use <strong>git add $Filename</strong> to add the files you need to staging area. Or you can use <strong>git add .</strong> (THERE IS A DOT AT THE END) to add all your files。</p><p>Then run <strong>git status</strong> to check the files in your local repository.</p><p>Run <strong>git commit -m ‘$YourCommits’</strong> to add some commits to this submit.</p><h3 id="Push-your-code-to-Github"><a href="#Push-your-code-to-Github" class="headerlink" title="Push your code to Github"></a>Push your code to Github</h3><p>First of all,use <strong>git pull origin master</strong> to pull your online repository.</p><p>Use <strong>git push origin master</strong> to submit your files to Github.</p><p>There are some cases that you will meet the ERROR that <em>refusing to merge unrelated histories</em> when you pull.You can try <strong>git pull origin master –allow-unrelated-histories</strong> to allow merging two unrelated branches.(At the first time,the online repository is empty but the local one have some files,so of course they are unrelated).</p><p>Now you can check your new repository on the Github.</p><p>Done,enjoy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;First things first,install git.&lt;/p&gt;
&lt;p&gt;——Stop BBing if you have not even installed the git.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Instal</summary>
      
    
    
    
    <category term="Git" scheme="https://blog.legr4ndk.top/categories/Git/"/>
    
    
    <category term="git" scheme="https://blog.legr4ndk.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>命名规则与驼峰命名法</title>
    <link href="https://blog.legr4ndk.top/2020/10/16/NamingRuleAndCamelCase/"/>
    <id>https://blog.legr4ndk.top/2020/10/16/NamingRuleAndCamelCase/</id>
    <published>2020-10-16T13:44:37.000Z</published>
    <updated>2020-10-16T14:03:21.625Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？</p><p>——Introducing Camel-Case：驼峰命名法</p></blockquote><p>我们现在先来看看一个例子：</p><p>假如我们想要定义一个变量存储我们的名字，该怎么命名呢？</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mylastname</span><br></code></pre></td></tr></table></figure><p>构成这个变量名的所有字母都通过小写被粗暴地整合在了一起，很难一眼看清，对吧？这种变量命名方法明显地降低了代码的可读性。要不，我们拆分一下单词？</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">my_last_mane</span><br></code></pre></td></tr></table></figure><p>显而易见地，这个变量名的可读性比上面那种高了很多，我们可以轻易地读出它的各个单词并且很清楚地知道它的意思。但是很显然，这不够紧凑，我们还得多打两个字符（吐槽下这下划线真的不是很好按）。</p><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>驼峰命名法的命名规格极为形象，通过大小写像驼峰一样变换来实现单词的区分，更方便直观地表示变量名。</p><p>那我们来看看驼峰命名法该怎么用：</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">myLastName</span><br></code></pre></td></tr></table></figure><p>相比于前两种，驼峰命名法既直观又紧凑，保证了代码可读性的同时也兼顾了效率。</p><p>驼峰命名法的规则是这样的： 当变量名或函数名是由多个单词连结在一起，构成的唯一识别字时，每一节个单词的首字母都采用大写来区分，单词与单词之间不额外添加下划线。</p><p>而以第一个单词的首字母是否要大写为区分，我们又可以分成大驼峰法和小驼峰法。</p><h4 id="大驼峰法："><a href="#大驼峰法：" class="headerlink" title="大驼峰法："></a>大驼峰法：</h4><p>包括第一个单词在内的所有单词的首字母全部大写，如：</p><ul><li>MyLastName</li><li>DataBaseUser</li></ul><h4 id="小驼峰法："><a href="#小驼峰法：" class="headerlink" title="小驼峰法："></a>小驼峰法：</h4><p>第一个单词的首字母不大写，其余每个单词的首字母均大写，如：</p><ul><li>myLastName</li><li>studentsAverageGrades</li></ul><p>驼峰命名法就介绍到这里。</p><hr><p>接下来再讲讲我使用的一种命名规则。</p><blockquote><p>强烈建议使用英文命名！！！</p></blockquote><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>变量名的命名，首先应该是这个变量要储存的内容的英文意思。借助你强大的英文水平，先把你想好的中文变量名翻译成英文，不会的话就借助翻译软件吧。</p><p>然后，如果你翻译出来的内容仅由1个英文单词构成，请直接以这个单词的<strong>完全小写</strong>的形式命名这个变量。如果是由多个单词组成的词组，应该使用<strong>小驼峰法</strong>的方式为这个变量命名。 记住，它应该是个名词或者名词性词组。 例如：</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">salary,</span>tax,carSum,taxRate<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>特殊地，给布尔类型的变量命名，建议使用 is + 属性名的方法，依照具体的语境，也可以用can，have，should等前缀代替is，同样使用小驼峰法。同时要记得避免使用否定词。</strong>例如：</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">isReal,</span>isHigh<span class="hljs-comment">;(√)</span><br><span class="hljs-built_in">isNotTall,</span>isError<span class="hljs-comment">;(×)</span><br></code></pre></td></tr></table></figure><h3 id="常量的命名规则"><a href="#常量的命名规则" class="headerlink" title="常量的命名规则"></a>常量的命名规则</h3><p>常量一般是指使用const关键字修饰定义的数据，有时也只使用预处理宏#define定义的数据。</p><h4 id="使用const关键字定义的常量"><a href="#使用const关键字定义的常量" class="headerlink" title="使用const关键字定义的常量"></a>使用const关键字定义的常量</h4><p>它的命名规则和变量类似，但是要使用<strong>大驼峰法</strong>，即第一个单词的首字母也要大写。例如：</p><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">Line</span>,SavingAccount,<span class="hljs-built_in">Pi</span>;<br></code></pre></td></tr></table></figure><h4 id="使用-define关键字宏定义的常量"><a href="#使用-define关键字宏定义的常量" class="headerlink" title="使用#define关键字宏定义的常量"></a>使用#define关键字宏定义的常量</h4><p>它的所有字母都应该采用<strong>大写</strong>，同时，若是由多个单词组成的变量名，为了区分每个单词，在<strong>每两个单词之间应该添加下划线</strong>。例如：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-literal">PI</span>,MAX_SIZE;<br></code></pre></td></tr></table></figure><h3 id="函数-方法的命名规则"><a href="#函数-方法的命名规则" class="headerlink" title="函数/方法的命名规则"></a>函数/方法的命名规则</h3><p>函数的名称应该是一个动词或者一个动词词组。如果函数名仅由单个单词构成，那么请以这个单词的<strong>完全小写形式</strong>命名这个函数。如果这个函数名是一个动词词组，请以<strong>小驼峰法</strong>的方式命名这个函数。例如：</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">getArea,</span>setPath,takeSteps<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="名字空间的命名规则（C-）"><a href="#名字空间的命名规则（C-）" class="headerlink" title="名字空间的命名规则（C++）"></a>名字空间的命名规则（C++）</h3><p>对于名字空间，请以一个英文单词完成对它的命名，而且，应该使用它的<strong>完全小写形式</strong>。例如：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">model</span>,<span class="hljs-meta">common</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="结构、类（C-）的命名规则"><a href="#结构、类（C-）的命名规则" class="headerlink" title="结构、类（C++）的命名规则"></a>结构、类（C++）的命名规则</h3><p>结构体和类的名称应该是一个名词或者名词性词组。若使用单个单词命名，请首字母大写；若使用词组，应使用<strong>大驼峰法</strong>命名。例如：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">Node</span><span class="hljs-title">,SomeClass</span>;<br></code></pre></td></tr></table></figure><p>但是，命名结构和类形成的实例（结构体和对象）时，应该依照一般的变量的命名法进行命名。</p><h3 id="对于枚举类型（以enum关键词声明）"><a href="#对于枚举类型（以enum关键词声明）" class="headerlink" title="对于枚举类型（以enum关键词声明）"></a>对于枚举类型（以enum关键词声明）</h3><p>同样建议使用名词或者名词性词组，以首字母大写或者大驼峰法命名。</p><p>而对于枚举类型的枚举常量，建议以全部大写字母+下划线分割单词的方式命名,同时应尽量使用共同的类型名作为前缀。</p><p>例如：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Color</span> &#123; <span class="hljs-title">COLOR_RED</span>, <span class="hljs-title">COLOR_GREEN</span>, <span class="hljs-title">COLOR_BLUE</span> &#125;;</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ColorType</span> &#123; <span class="hljs-title">COLOR_TYPE_WARM</span>, <span class="hljs-title">COLOR_TYPE_COLD</span> &#125;;</span><br></code></pre></td></tr></table></figure><hr><p><strong>额外再提几个用于命名的关键字以及技巧，让代码更直观</strong></p><ul><li>get应该用在直接取得已设定值的函数中。</li><li>set应该用在直接为变量设定值的函数中。</li><li>compute应该用在用于进行计算的函数中。</li><li>find应该用在用于查找的函数中。</li><li>init/initialize应该使用在用于初始化的函数中。</li><li>在需要标识序号的变量名中，使用No + 序号比较合适。</li><li>布尔变量的命名应使用is，has等前缀，并且尽量避免否定词。</li><li>循环变量建议设置为i，j，k，并且建议优先使用i而把j，k用于循环嵌套。</li><li>对于缩略词我们有两种态度：1、对于那种缩写了人家可能就看不懂了的，比如cmd，init，请不要用缩写代替他们。2、对于那种缩写认识展开别人就看不懂的，比如HTML，CPU，老老实实写缩写。</li></ul><p><strong>另外，对于自己写的头文件的命名，推荐使用大驼峰命名法。例如</strong></p><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MyClass</span>.</span></span>h<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CppFunction</span>.</span></span>h<br></code></pre></td></tr></table></figure><p>OK,有关命名方法先写这么多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？&lt;/p&gt;
&lt;p&gt;——Introducing Camel-Case：驼峰命名法&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="Programming" scheme="https://blog.legr4ndk.top/categories/Programming/"/>
    
    
    <category term="CamelCase" scheme="https://blog.legr4ndk.top/tags/CamelCase/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.legr4ndk.top/2020/10/15/HelloWorld/"/>
    <id>https://blog.legr4ndk.top/2020/10/15/HelloWorld/</id>
    <published>2020-10-15T14:30:10.810Z</published>
    <updated>2020-10-16T16:06:04.742Z</updated>
    
    <content type="html"><![CDATA[<h3>Hello World</h3><p>哈哈哈今天布置了一个github上的Hexo静态站点</p><p>准备下次写个教程（flag插好）</p><p>这次我整了两个分部，gitee和github上面我都有布置</p><p>不得不吐槽一下gitee page 是真的难用，每次更新居然要去手动刷新，时效性还特么巨低</p><p>github就是GFW的锅了，太慢了太慢了，移动甚至都不让你上去</p><p>害，这边主要搬运一些之前写在别处的文章</p><p>还有随时想写的感想，所以不能算是纯技术类博客吧</p><p>（所以这站点名字叫QQ空间哈哈哈哈）</p><p>等我更新！</p><p><strong>宰🕊祭天</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;Hello World&lt;/h3&gt;

&lt;p&gt;哈哈哈今天布置了一个github上的Hexo静态站点&lt;/p&gt;
&lt;p&gt;准备下次写个教程（flag插好）&lt;/p&gt;
&lt;p&gt;这次我整了两个分部，gitee和github上面我都有布置&lt;/p&gt;
&lt;p&gt;不得不吐槽一下gitee page 是真</summary>
      
    
    
    
    
  </entry>
  
</feed>
