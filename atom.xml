<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Legrandk&#39;s Qzone</title>
  
  
  <link href="http://www.legr4ndk.top/atom.xml" rel="self"/>
  
  <link href="http://www.legr4ndk.top/"/>
  <updated>2021-02-12T05:45:28.157Z</updated>
  <id>http://www.legr4ndk.top/</id>
  
  <author>
    <name>Legrandk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>S3Solve</title>
    <link href="http://www.legr4ndk.top/2021/02/12/S3Solve/"/>
    <id>http://www.legr4ndk.top/2021/02/12/S3Solve/</id>
    <published>2021-02-12T05:43:31.000Z</published>
    <updated>2021-02-12T05:45:28.157Z</updated>
    
    <content type="html"><![CDATA[<p>这半年最大的变化就是从网安去了计算机吧，说实话我觉得转专业带给我的平时生活的改变不是很大，除了不怎么会和室友一起上课了以外，虽然认识了很多从别的专业一起汇聚而来的人，但是其实我发现，新班级也好，旧班级也好，经常一起聊天探讨的也没几个人，虽然都分到一个班里了，但是大家其实很多都还是陌生人。</p><p>从我的专业角度来说，这学期，我是真的下决心坚持写博客了。记录自己的所学真的很棒，把网上学到的东西再用自己的话写一遍下来，不仅说是算一种留念，也能说是标记所学，将来在同样的问题上也更不容易翻车。这学期主要是有一门特殊的课叫创新实践。我们转专业学生一开始是没得选的，只能在所剩无几的名额中挑选了。我跟了一个做网络应用的老师（来源于对人工智能算法的抵触，虽然还是没逃掉），前半学期看起来很人畜无害，真的就是最轻松最养老的老师了，直到学期末，老师让我们一起申报新苗和大创计划的时候，才是我们麻烦的开始。现在，我作为一个没有学过Java的人，也在努力攻克JavaWeb这块肉。</p><p>我觉得我一个根本不会被贩卖焦虑的人，在群里每次看到大佬发言然后我一点都不懂的时候，真的就会不由自主地放弃摸鱼的想法。这学期，说实话摸鱼很多，就没学什么技术吧，每次都跟自己找借口说都来了计算机了，不着急学慢慢来。可是到现在，周围同学都上升了很多，我都甚至有的时候不怎么敢去搭话吧哈哈哈。</p><p>从人际上说的话，这学期其实没认识几个人（指名字和脸能对上的），大部分的认识人我都是在上课的时候，但是呢，就没有几个一起上过课的同学吧，平时其实也不怎么聊得起来。重组班级的人际关系说实话，很难搞，大家都已经建立了一个大学的朋友圈了，我发觉很多人其实并不是很想再像大家都是陌生人一样建立关系了。我这学期班级活动确实参与了不少呢。哎，现在有点后悔其实，我当时要是参选个班委是不是可以认识更多同学呢。当然，这学期说实话也确实认识了几个很值得的朋友，希望他们也能来年继续多多指教吧。</p><p>这学期，我觉得我最和mainstream对立的地方就是，大家都在学Java和Go开发，只有我在学几乎没有人看好的.NET和.NET Core平台。我对微软从很久以前就有个很独特的感情吧，也不知道怎么回事，就这么入了巨硬的坑，我相信这玩意虽然大家都不看好，但是我好好学的话还是很有用的。我一直挺看好这个平台的，而且千金难买我愿意，希望我喜欢的平台也能越来越好吧。</p><p>来年啊，课真的就越来越多了，也要进入大三了，说早也不早，差不多就要到下一次大的抉择的时候了，希望来年这个时候，我已经定好目标了吧。不过在那之前，我还是得先继续好好学呢，课内也好，课外也好，项目也好，希望能顺利齐头并进吧。</p><hr><p>好吧，我写到这儿我已经混乱了。</p><p>加油，奥里给！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这半年最大的变化就是从网安去了计算机吧，说实话我觉得转专业带给我的平时生活的改变不是很大，除了不怎么会和室友一起上课了以外，虽然认识了很多从别的专业一起汇聚而来的人，但是其实我发现，新班级也好，旧班级也好，经常一起聊天探讨的也没几个人，虽然都分到一个班里了，但是大家其实很多</summary>
      
    
    
    
    <category term="Summary" scheme="http://www.legr4ndk.top/categories/Summary/"/>
    
    
    <category term="文艺" scheme="http://www.legr4ndk.top/tags/%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>解决Servlet页面中文乱码问题</title>
    <link href="http://www.legr4ndk.top/2021/02/08/ServletHandleWithChinese/"/>
    <id>http://www.legr4ndk.top/2021/02/08/ServletHandleWithChinese/</id>
    <published>2021-02-08T13:44:47.000Z</published>
    <updated>2021-02-08T13:48:27.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>年前诈尸再来记一笔。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">resp.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br></code></pre></td></tr></table></figure><p>Servlet页面中文乱码的解法。</p><hr><p><strong>新年快乐，武运昌隆。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;年前诈尸再来记一笔。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;resp.se</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="后端" scheme="http://www.legr4ndk.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在JSP上使用JavaBean</title>
    <link href="http://www.legr4ndk.top/2021/01/07/JSPuseJavaBean/"/>
    <id>http://www.legr4ndk.top/2021/01/07/JSPuseJavaBean/</id>
    <published>2021-01-07T07:54:53.000Z</published>
    <updated>2021-01-07T08:39:54.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>恁诸位新年好哇！</p></blockquote><p>记录一下怎么在JSP中使用JavaBean来避免写重复代码。</p><h3 id="什么是JavaBean"><a href="#什么是JavaBean" class="headerlink" title="什么是JavaBean"></a>什么是JavaBean</h3><blockquote><p>JavaBean 是特殊的 Java 类，使用 Java 语言书写，并且遵守 JavaBean API 规范。</p><p>接下来给出的是 JavaBean 与其它 Java 类相比而言独一无二的特征：</p><ul><li>提供一个默认的无参构造函数。</li><li>需要被序列化并且实现了 Serializable 接口。</li><li>可能有一系列可读写属性。</li><li>可能有一系列的 <strong>getter</strong> 或 <strong>setter</strong> 方法。</li></ul></blockquote><p>以上来自<a href="https://www.runoob.com/">菜鸟教程</a>。总之，JavaBean就类似你事先写好一个类然后可以在多个不同的文件里引入而不需要在每个JSP文件里都单独声明这个类，可以减少很多的重复代码。</p><h3 id="怎么写一个JavaBean"><a href="#怎么写一个JavaBean" class="headerlink" title="怎么写一个JavaBean"></a>怎么写一个JavaBean</h3><p>JavaBean的特征在上面已经有所提及了，下面以一个操作JDBC连接MySQL的JavaBean文件来示范如何写JavaBean。</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> src; <span class="hljs-comment">//包名</span><br><br><span class="hljs-keyword">import</span> java.sql.*; <span class="hljs-comment">//引入必需的库</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlBean</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123; <span class="hljs-comment">//必须继承序列化接口</span><br>    <span class="hljs-comment">//以下为字段，全是私有的，这边的内容在使用时都不会改，所以没有getter和setter</span><br>    String DBDriver = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>    String ConnStr = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/$DBNAME&quot;</span>;<br>    String MyUser = <span class="hljs-string">&quot;$USERNAME&quot;</span>;<br>    String MyPassword = <span class="hljs-string">&quot;$PASSWORD&quot;</span>;<br>    Connection conn = <span class="hljs-keyword">null</span>;<br>    Statement stmt = <span class="hljs-keyword">null</span>;<br>    ResultSet rs = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MysqlBean</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(DBDriver);<br>        &#125; <span class="hljs-keyword">catch</span> (java.lang.ClassNotFoundException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;DBconn (): &quot;</span> + e.getMessage());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultSet <span class="hljs-title">executeQuery</span><span class="hljs-params">(String sql)</span> </span>&#123;<br>        rs = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = DriverManager.getConnection(ConnStr, MyUser, MyPassword);<br>            Statement stmt = conn.createStatement(<br>                    java.sql.ResultSet.TYPE_SCROLL_INSENSITIVE,<br>                    java.sql.ResultSet.CONCUR_READ_ONLY);<br>            rs = stmt.executeQuery(sql);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>            System.err.println(<span class="hljs-string">&quot;aq.executeQuery:&quot;</span> + ex.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> rs;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">executeUpdate</span><span class="hljs-params">(String sql)</span> </span>&#123;<br>        &#123;<br>            <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                conn = DriverManager.getConnection(ConnStr, MyUser, MyPassword);<br>                Statement stmt = conn.createStatement();<br>                count = stmt.executeUpdate(sql);<br>                stmt.close();<br>                conn.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>                System.err.println(<span class="hljs-string">&quot;aq.executeQuery:&quot;</span> + ex.getMessage());<br>            &#125;<br>            <span class="hljs-keyword">return</span> count;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">closeConn</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (rs != <span class="hljs-keyword">null</span>)<br>                rs.close();<br>            <span class="hljs-keyword">if</span> (stmt != <span class="hljs-keyword">null</span>)<br>                stmt.close();<br>            <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>)<br>                conn.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>            System.err.println(<span class="hljs-string">&quot;closeConn:&quot;</span> + ex.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在文件里完成必要的自定义（比如数据库名等）之后，将其保存为<code>MysqlBean.java</code>，然后使用<code>javac</code>命令将其编译为class文件（注意使用的Java版本需要与你运行tomcat的JRE版本相同），得到<code>MysqlBean.class</code>文件。这样，你就成功生成了一个JavaBean的类文件。</p><h3 id="如何在JSP里面使用JavaBean"><a href="#如何在JSP里面使用JavaBean" class="headerlink" title="如何在JSP里面使用JavaBean"></a>如何在JSP里面使用JavaBean</h3><h4 id="部署JavaBean"><a href="#部署JavaBean" class="headerlink" title="部署JavaBean"></a>部署JavaBean</h4><p>跟据你写的包名（比如我的是src包），将class文件放在<code>&lt;JSP 项目&gt;/WEB-INF/classes/包名/</code>文件夹中，例如本示例，class文件的位置为<code>&lt;JSP 项目&gt;/WEB-INF/classes/src/MysqlBean.class</code>。</p><h4 id="调用JavaBean"><a href="#调用JavaBean" class="headerlink" title="调用JavaBean"></a>调用JavaBean</h4><p>在JSP文件中，你可与使用<code>&lt;jsp:useBean /&gt;</code>标签来声明一个Bean。在声明一个Bean之后，这个JavaBean对象就变成脚本变量，可以在JSP里面直接使用。例如，要在JSP里使用上文提到的Bean，可以在JSP的开头加上：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;jsp:useBean id=<span class="hljs-string">&quot;MySQL&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;src.MysqlBean&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>其中，id代表Bean生成的对象的脚本变量的名字，class代表class文件所在的包和类名。</p><p>然后，你就可以在JSP中使用<code>对象名（id）.方法名</code>的方式来使用Bean内的方法了，例如我想使用上文的Bean中的execute方法，我可以使用<code>MySQL.execute(&quot;&quot;);</code>。</p><h4 id="特殊的getter、setter使用方法"><a href="#特殊的getter、setter使用方法" class="headerlink" title="特殊的getter、setter使用方法"></a>特殊的getter、setter使用方法</h4><p>JavaBean中对于getter，setter函数使用特殊的标签来调用：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;jsp:setProperty name=<span class="hljs-string">&quot;bean的id&quot;</span> property=<span class="hljs-string">&quot;属性名&quot;</span> value=<span class="hljs-string">&quot;value&quot;</span>/&gt; <span class="hljs-comment">//调用setter()</span><br>&lt;jsp:getProperty name=<span class="hljs-string">&quot;bean的id&quot;</span> property=<span class="hljs-string">&quot;属性名&quot;</span>/&gt; <span class="hljs-comment">//调用getter()</span><br></code></pre></td></tr></table></figure><p>上面那个类我没写getter和setter，就不演示了~</p><hr><p>先这样，JSP其实好像用的不多，以后还是Servlet吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;恁诸位新年好哇！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记录一下怎么在JSP中使用JavaBean来避免写重复代码。&lt;/p&gt;
&lt;h3 id=&quot;什么是JavaBean&quot;&gt;&lt;a href=&quot;#什么是JavaBean&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="后端" scheme="http://www.legr4ndk.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JDBC提供的SQL操作API解析</title>
    <link href="http://www.legr4ndk.top/2020/12/23/JDBCexecuteCourse/"/>
    <id>http://www.legr4ndk.top/2020/12/23/JDBCexecuteCourse/</id>
    <published>2020-12-23T10:55:28.000Z</published>
    <updated>2020-12-23T14:30:57.157Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DriveManager类"><a href="#DriveManager类" class="headerlink" title="DriveManager类"></a>DriveManager类</h2><p>DriveManager类有两个作用：注册驱动与获得数据库连接。</p><p>注册驱动使用<code>registerDrive()</code>方法实现，建立连接使用<code>getConnection()</code>方法实现。</p><h3 id="registerDriver"><a href="#registerDriver" class="headerlink" title="registerDriver()"></a>registerDriver()</h3><p>在此类中有一段静态代码使用<code>DriverManager.registerDriver(new Driver());</code>完成了驱动的注册，所以已经无须手动调用此方法注册。</p><h3 id="getConnection"><a href="#getConnection" class="headerlink" title="getConnection()"></a>getConnection()</h3><p>此方法有三个String类型参数：</p><ul><li>url：与数据库连接的路径 </li><li>user：与数据库连接的用户名 </li><li>password：与数据库连接的密码</li></ul><p>此处主要涉及URL的写法，比较特殊：<code>jdbc:mysql://localhost:3306/$DB_NAME</code>。其中：</p><ul><li>jdbc：连接数据库的协议 </li><li>mysql：jdbc的子协议 </li><li>localhost：连接的MySQL数据库服务器的主机地址。连接是本机就可以写成localhost，如果连接不是本机的，就需要写上连接主机的IP地址或域名。 </li><li>3306：MySQL数据库服务器的端口号 </li><li>$DB_NAME：数据库名称</li></ul><p>该函数将会与数据库连接，如果连接成功则返回一个<code>Connection</code>类的数据库连接对象，若连接失败则返回null。</p><h2 id="Connection类"><a href="#Connection类" class="headerlink" title="Connection类"></a>Connection类</h2><p>Connection类即数据库连接对象，有两大功能：创建用于执行SQL语句的对象和管理事务</p><p>以下三个方法可以创建用于执行SQL语句的对象：</p><ul><li>createStatement()：返回一个Statement对象，用于执行SQL</li><li>prepareCall()：返回一个CallableStatement对象，用于调用数据库中存储过程</li><li>prepareStatement()：返回一个PreparedStatement对象，用于执行SQL并对SQL进行预处理以解决SQL注入漏洞。</li></ul><p>以下三个无返回值的方法用于管理数据库事务：</p><ul><li>getAutoCommit()：将此连接的自动提交模式设定为给定状态</li><li>commit()：使所有上一次提交/回滚后进行的更改成为永久更改，并释放此Connection对象当前的数据库锁</li><li>rollback()：取消在当前事务中进行的所有更改，并释放此Connection对象当前的数据库锁</li></ul><h2 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h2><p>Statement 接口提供了三种执行 SQL 语句的方法：</p><ul><li>executeQuery()</li><li>executeUpdate() </li><li>execute()</li></ul><p>我们需要针对不同的SQL语句使用这三种方法</p><h3 id="executeQuery"><a href="#executeQuery" class="headerlink" title="executeQuery()"></a>executeQuery()</h3><p><code>executeQuery()</code>返回一个<code>ResultSet</code>类的对象，该对象是一个结果集。这个方法只能被用于查询语句，比如用的最多的<code>SELECT</code>语句，执行完语句后会返回代表查询结果的<code>ResultSet</code>对象。随后可以通过<code>ResultSet</code>类中的getString()方法来获取读到的数据。</p><h3 id="executeUpdate"><a href="#executeUpdate" class="headerlink" title="executeUpdate()"></a>executeUpdate()</h3><p><code>executeUpdate()</code>常用于执行<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>CREATE TABLE</code>等非查询类语句。常用于数据库与数据表的增删改。它返回一个int类型的值，对于<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>等操作，会返回数据表中受影响的行数；对于<code>CREATE TABLE</code>等的操作，它的返回值总为0。</p><h3 id="execute"><a href="#execute" class="headerlink" title="execute()"></a>execute()</h3><p><code>execute()</code>可以用于执行任何SQL语句。它的返回值是一个bool类型的值，来表明该SQL语句是否返回了<code>ResultSet</code>对象。如果执行后得到的第一个结果是<code>ResultSet</code>则返回true，否则返回false。返回为true后可以利用<code>getResultSet()</code>方法来获取对应的<code>ResultSet</code>类的结果集对象。此函数更复杂，推荐仅当不知道SQL语句的具体类型时使用此函数来执行。</p><h2 id="ResultSet接口"><a href="#ResultSet接口" class="headerlink" title="ResultSet接口"></a>ResultSet接口</h2><p><code>ResultSet</code>类是查询的结果集。主要使用两个方法来进行操作：getString()和next()。</p><h3 id="getString"><a href="#getString" class="headerlink" title="getString()"></a>getString()</h3><p><code>getString()</code>方法接受一个String类型的参数，作为要获得的字段的字段名。它会返回一个String类型的值，就是<code>ResultSet</code>对象当前指向行的所求字段的值。此方法多用于处理查询所得值。</p><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p><code>next()</code>方法会将该<code>ResultSet</code>对象所指向行的光标向下移动一行。它返回一个bool类型的值，当光标已经不能下移时会返回false，否则返回true并下移光标。此方法可以用于遍历查询所得数据或者判断查询是否有查到值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DriveManager类&quot;&gt;&lt;a href=&quot;#DriveManager类&quot; class=&quot;headerlink&quot; title=&quot;DriveManager类&quot;&gt;&lt;/a&gt;DriveManager类&lt;/h2&gt;&lt;p&gt;DriveManager类有两个作用：注册驱动与获得</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="后端" scheme="http://www.legr4ndk.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>NPUCTF HappyCheckInVerification WP</title>
    <link href="http://www.legr4ndk.top/2020/12/17/HappyCheckinNPUWP/"/>
    <id>http://www.legr4ndk.top/2020/12/17/HappyCheckinNPUWP/</id>
    <published>2020-12-17T15:39:52.000Z</published>
    <updated>2020-12-20T15:43:38.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文搬运自我写在别处的文章</p></blockquote><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><p>题目链接：<a href="https://pan.baidu.com/s/1c_Y0WJmzTdNVyYgjHmUI_Q">https://pan.baidu.com/s/1c_Y0WJmzTdNVyYgjHmUI_Q</a></p><p>提取码: qhh8</p><p>Hint：关注西北工业大学信息安全协会微信公众号NWPUSEC</p><hr><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>下载得到无后缀名的名叫zip的文件，把后缀名改成.zip，提示文件已损坏，故用16进制文件查看器检查文件（本文使用HxD）。</p><p><img src="http://greenhateam.top/wp-content/uploads/2020/05/hcv1.png" alt="img"></p><p>这是此文件的文件头，可见zip文件的文件头标记504B0304不在文件头部，反而是zip文件的目录结束标识（504B0506）在文件头。把从00000000-00000015的部分移动至文件尾，保存重新打开，就可以看到zip文件的文件了。此zip文件带有伪加密，可以通过搜索的方法搜索zip文件头标记504B0102，在其偏移5字节的地方改为00（要改两处）来去除伪加密。</p><p><img src="http://greenhateam.top/wp-content/uploads/2020/05/hcv2.png" alt="img"></p><p>保存解压即可获得一个mp4视频和一个二维码文件。</p><p>视频文件是喜闻乐见的黑人抬棺材的视频，但是在视频中有两个部分被植入了拨号音。截取这段音频降噪，使用dtmf2num工具识别拨号音，得到电话号码13418070885。</p><p>再来看二维码：</p><p><img src="http://greenhateam.top/wp-content/uploads/2020/05/hcv3.png" alt="img"></p><p>这是获取的二维码图像，可见二维码的三个定位符均被抹去，所以无法扫描。通过PS添加三个定位符，得到一个二维码。扫描得到以下文字：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs rawtext">flag&#123;this_is_not_flag&#125;<br>三曳所諳陀怯耶南夜缽得醯怯勝數不知喝盧瑟侄盡遠故隸怯薩不娑羯涅冥伊盧耶諳提度奢道盧冥以朋罰所即栗諳蒙集皤夷夜集諳利顛呐寫無怯依奢竟<br>#￥#%<br>E68BBFE4BD9BE68B89E6A0BCE79A84E5A7BFE58ABFE59CA8E69C80E5908E32333333<br>||<br>254333254242254338254342254231254338254345254432254238254643254236254145254239254441254437254234254232254131254236254245253244253244254343254438254330254341254336254435<br>…sadwq#asdsadasf faf$use$dasdasdafafa_$ba##se64$<br></code></pre></td></tr></table></figure><p>this is not flag 后面的第一部分哪些诡异的文字，是“与佛论禅”编码。最前面加上“佛曰：”，得到一句话：“都说了这不是佛拉格了”。</p><p>第二部分是一段十六进制数，把它转成字符串，得到：“拿佛拉格的姿势在最后”。</p><p>第三段也是一串十六进制数，把它转成字符串，得到：%C3%BB%C8%CB%B1%C8%CE%D2%B8%FC%B6%AE%B9%DA%D7%B4%B2%A1%B6%BE%2D%2D%CC%D8%C0%CA%C6%D5 肉眼可见它是url编码，直接转换，得到一串字符：“没人比我更懂冠状病毒–特朗普”。</p><p>最后一段没啥花头了，就是看到了use base64，是时候把刚刚从拨号音得到的电话号码用BASE64编码发到公众号，得到一段诡异的音频。</p><p><audio controls src="http://greenhateam.top/wp-content/uploads/2020/05/%E9%AB%98%E6%B8%85%E9%87%8D%E7%BD%AE.mp3" style="box-sizing: inherit; display: inline-block; width: 660.25px; min-width: 300px;"></audio><br>这是一段sstv的音频，里面有个图，直接使用软件MMSSTV，播放这段音频给电脑听（推荐电脑内录），你就可以看到孙狗的笑容（天皇遗照）。flag就写在孙🐕的胸上。</p><p><img src="http://greenhateam.top/wp-content/uploads/2020/05/hcv.png" alt="img"></p><hr><p><strong>结束</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文搬运自我写在别处的文章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;题目信息&quot;&gt;&lt;a href=&quot;#题目信息&quot; class=&quot;headerlink&quot; title=&quot;题目信息&quot;&gt;&lt;/a&gt;题目信息&lt;/h2&gt;&lt;p&gt;题目链接：&lt;a href=&quot;</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="CTF" scheme="http://www.legr4ndk.top/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>实现网页登陆的逻辑</title>
    <link href="http://www.legr4ndk.top/2020/12/17/BackEndLoginCourse/"/>
    <id>http://www.legr4ndk.top/2020/12/17/BackEndLoginCourse/</id>
    <published>2020-12-17T14:46:26.000Z</published>
    <updated>2020-12-20T15:08:02.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实现登陆逻辑至少涉及两个方面，登陆与注册</p><p>本文使用SQL语言的MySQL dialect</p></blockquote><h3 id="登陆（Log-in）"><a href="#登陆（Log-in）" class="headerlink" title="登陆（Log in）"></a>登陆（Log in）</h3><p>登陆主要是实现将用户提交的含有用户名<code>uname</code>和密码<code>passwd</code>的表单提交给数据库对比，如果发现此条记录在数据库中存在且合法，则返回登陆成功，否则返回登陆失败，需要请求用户重新提交。</p><p>这边主要注意的是一个点，在查询的时候我们会使用SQL语句去数据库查询，一般想到的逻辑应该是去查询得到用户名对应的密码，然后再去对比用户提交的密码与数据库返回的密码是否一致。即使用了以下的SQL代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT passwd FROM user_info WHERE uname &#x3D; $UNAME;<br></code></pre></td></tr></table></figure><p>在登陆成功情况下两者并无任何区别，但实际上这个方式有一个巨大的缺陷：在登陆失败时，这种数据处理方式割裂了“用户名输入错误”（此用户名不存在）与“查到用户名，但密码错误”两种情况。如果这两种不同的情况被以不同形式返回到前端（比如分别提示“用户名错误”或“密码错误”，那么就很容易被通过“撞库攻击”而“撞”出网站的许多用户的用户名，即使他们并不知道每个id的密码，这无疑方便了攻击者通过id暴力穷举或者使用密码字典的方式获取密码。</p><p>正确的处理方法应该是连着用户名和密码一起放入SQL语句里去查询，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT * FROM user_info WHERE uname &#x3D; $UNAME AND passwd &#x3D; $PASSWD;<br></code></pre></td></tr></table></figure><p>然后通过执行了该语句之后是否具有返回数据的方式来判断用户试图登陆的账号密码对是否被注册且有效。如果成功，则结果同上，但是若登陆失败，那么它只能体现用户名和密码错误，安全性相对更高。</p><h3 id="注册（Register）"><a href="#注册（Register）" class="headerlink" title="注册（Register）"></a>注册（Register）</h3><p>注册的验证涉及三个步骤：</p><ul><li>验证提交的密码的合法性</li><li>验证提交的username的唯一性</li><li>插入提交的用户名与密码到数据库。</li></ul><h4 id="提交密码的合法性判断"><a href="#提交密码的合法性判断" class="headerlink" title="提交密码的合法性判断"></a>提交密码的合法性判断</h4><p>无非是判断密码长度、判断是否含有不合法字符、判断密码格式是否合规。使用各种语言的字符串处理手段乃至正则表达式都可以直接实现，此处不再赘述。提供一个常见的网站密码格式要求：以字母开头，必须包含大/小写字母、数字、一般符号的至少三种，长度在8-64位之间。</p><h4 id="提交的用户名的唯一性判断"><a href="#提交的用户名的唯一性判断" class="headerlink" title="提交的用户名的唯一性判断"></a>提交的用户名的唯一性判断</h4><p>可以通过SQL语言的SELECT语句，即查询语句来实现，比如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">SELECT * FROM user_info WHERE uname &#x3D; $UNAME;<br></code></pre></td></tr></table></figure><p>然后通过执行该语句后是否有查询到的数据来判断这个用户名是否被注册过，以决定是否要为此组提交的数据执行注册（即插入数据表）的操作。</p><blockquote><p>值得一提的是，你可与为某一列设置UNIQUE来保证这列的数据一定不相同，此情况下，若插入重复的username将会导致MySQL抛出异常，需要对这一异常进行处理。</p></blockquote><h4 id="插入提交的数据到数据库"><a href="#插入提交的数据到数据库" class="headerlink" title="插入提交的数据到数据库"></a>插入提交的数据到数据库</h4><p>在我们确认用户提交的数据在数据库中不会出现问题之后，我们便可以把用户提交的键值对插入数据表中了。插入操作使用INSERT来实现，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">INSERT INTO user_info (uname, passwd) VALUES ($UNAME, $PASSWD);<br></code></pre></td></tr></table></figure><p>此方法会把$UNAME与$PASSWD以一条新记录的方式插入到对于数据表中。一般在这种情况下，它便不再会出现插入异常了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;实现登陆逻辑至少涉及两个方面，登陆与注册&lt;/p&gt;
&lt;p&gt;本文使用SQL语言的MySQL dialect&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;登陆（Log-in）&quot;&gt;&lt;a href=&quot;#登陆（Log-in）&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="后端" scheme="http://www.legr4ndk.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在JSP上连接MySQL数据库</title>
    <link href="http://www.legr4ndk.top/2020/12/16/JSPconnectMySQL/"/>
    <id>http://www.legr4ndk.top/2020/12/16/JSPconnectMySQL/</id>
    <published>2020-12-16T12:53:36.000Z</published>
    <updated>2020-12-16T13:27:03.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="驱动准备"><a href="#驱动准备" class="headerlink" title="驱动准备"></a>驱动准备</h2><p>你需要下载Java Database Connector for MySQL，本文提供一个来自于菜鸟教程的jar包，版本号为5.1.39。点击<a href="http://static.runoob.com/download/mysql-connector-java-5.1.39-bin.jar">此处</a>下载。将此文件放入tomcat目录的lib文件夹中。</p><h2 id="配置Tomcat的连接池"><a href="#配置Tomcat的连接池" class="headerlink" title="配置Tomcat的连接池"></a>配置Tomcat的连接池</h2><p>不配置连接池，在使用驱动包的时候tomcat会返回500 Internal Server Error，提示ClassNotFoundException（异常：找不到类），可以通过配置它的连接池来解决问题。</p><h3 id="修改server-xml"><a href="#修改server-xml" class="headerlink" title="修改server.xml"></a>修改server.xml</h3><p>修改位于tomcat目录下的conf/server.xml,找到<code>&lt;GlobalNamingResources&gt;</code>标签，在此标签内我们需要添加内容。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这个标签是已经存在的，找到它然后编辑即可--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">GlobalNamingResources</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--这部分为文件自带内容，不作改动--&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">Resource</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;UserDatabase&quot;</span> <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;Container&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;org.apache.catalina.UserDatabase&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">description</span>=<span class="hljs-string">&quot;User database that can be updated and saved&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">factory</span>=<span class="hljs-string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">pathname</span>=<span class="hljs-string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置mysql数据库的连接池, 需要做的额外步骤是将mysql的Java驱动类放到tomcat的lib目录下--&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">Resource</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc/mysqlds&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">auth</span>=<span class="hljs-string">&quot;Container&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;$UNAME&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;$PWD&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">maxIdle</span>=<span class="hljs-string">&quot;30&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">maxWait</span>=<span class="hljs-string">&quot;10000&quot;</span> </span><br><span class="hljs-tag">                       <span class="hljs-attr">maxActive</span>=<span class="hljs-string">&quot;100&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">driverClassName</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="hljs-tag">                       <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/$DBNAME&quot;</span> /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">GlobalNamingResources</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>其中 <code>$DBNAME</code>位置放你的数据库名，<code>$UNAME</code>位置放置你的数据库用户名，<code>$PWD</code>位置放置你的数据库密码</p><h3 id="修改context-xml"><a href="#修改context-xml" class="headerlink" title="修改context.xml"></a>修改context.xml</h3><p>修改位于tomcat目录下的conf/context.xml，在<code>&lt;Context&gt;</code>标签内我们需要添加内容。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--这部分为文件自带内容，不作改动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>WEB-INF/web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>WEB-INF/tomcat-web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WatchedResource</span>&gt;</span>$&#123;catalina.base&#125;/conf/web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">WatchedResource</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--以下为在本文件中的添加内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ResourceLink</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc/mysqlds&quot;</span> <span class="hljs-attr">global</span>=<span class="hljs-string">&quot;jdbc/mysqlds&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;javax.sql.DataSource&quot;</span>/&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">Context</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改web-xml"><a href="#修改web-xml" class="headerlink" title="修改web.xml"></a>修改web.xml</h3><p>修改位于tomcat目录下的网页项目文件夹下的WEB-INF/web.xml文件，在</p><p><code>&lt;web-app&gt;</code>内我们需要添加内容。</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--以下为在本文件中的添加内容--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource-ref</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>mysql数据库连接池<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">res-ref-name</span>&gt;</span>jdbc/mysqlds<span class="hljs-tag">&lt;/<span class="hljs-name">res-ref-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">res-type</span>&gt;</span>javax.sql.DataSource<span class="hljs-tag">&lt;/<span class="hljs-name">res-type</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">res-auth</span>&gt;</span>Container<span class="hljs-tag">&lt;/<span class="hljs-name">res-auth</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">res-sharing-scope</span>&gt;</span>Shareable<span class="hljs-tag">&lt;/<span class="hljs-name">res-sharing-scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource-ref</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置之后，<strong>需重启tomcat</strong>。之后连接数据库的时候就不会出现ClassNotFoundException了。</p><h2 id="JSP连接数据库"><a href="#JSP连接数据库" class="headerlink" title="JSP连接数据库"></a>JSP连接数据库</h2><p>给出一段DEMO：</p><figure class="highlight"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.sql.*&quot;</span>%&gt;<br><br>&lt;html&gt;<br>    &lt;head&gt;<br>        &lt;title&gt;通过JSP打开数据表&lt;/title&gt;<br>    &lt;/head&gt;<br>    &lt;body&gt;<br><br>        &lt;%<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);  <span class="hljs-comment">//驱动程序名</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/$DBNAME&quot;</span>; <span class="hljs-comment">//数据库名</span><br>            String username = <span class="hljs-string">&quot;$UNAME&quot;</span>;  <span class="hljs-comment">//数据库用户名</span><br>            String password = <span class="hljs-string">&quot;$PWD&quot;</span>;  <span class="hljs-comment">//数据库用户密码</span><br>            Connection conn = DriverManager.getConnection(url, username, password);  <span class="hljs-comment">//连接数据库并返回连接状态</span><br><br>            <span class="hljs-keyword">if</span>(conn != <span class="hljs-keyword">null</span>)&#123;<br>                out.print(<span class="hljs-string">&quot;数据库连接成功！&quot;</span>);<br>                out.print(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>                Statement stmt = <span class="hljs-keyword">null</span>;<br>                ResultSet rs = <span class="hljs-keyword">null</span>;<br>                String sql = <span class="hljs-string">&quot;SELECT * FROM $TABLENAME;&quot;</span>;  <span class="hljs-comment">//查询语句</span><br>                stmt = conn.createStatement();<br>                rs = stmt.executeQuery(sql);<br>                out.print(<span class="hljs-string">&quot;查询结果：&quot;</span>);<br>                out.print(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>                out.println(<span class="hljs-string">&quot;id&quot;</span>+<span class="hljs-string">&quot;  &quot;</span>+<span class="hljs-string">&quot;uname&quot;</span>+<span class="hljs-string">&quot;  &quot;</span>+<span class="hljs-string">&quot;pwd&quot;</span>);<br>                out.print(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);<br>                <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>                    out.println(rs.getString(<span class="hljs-string">&quot;id&quot;</span>)+<span class="hljs-string">&quot; &quot;</span>+rs.getString(<span class="hljs-string">&quot;uname&quot;</span>)+<span class="hljs-string">&quot; &quot;</span>+rs.getString(<span class="hljs-string">&quot;passwd&quot;</span>)+<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>); <span class="hljs-comment">//将查询结输出</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                out.print(<span class="hljs-string">&quot;连接失败！&quot;</span>);<br>            &#125;<br><br>        %&gt;<br>    &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>其中 <code>$DBNAME</code>位置放你的数据库名，<code>$UNAME</code>位置放置你的数据库用户名，<code>$PWD</code>位置放置你的数据库密码，<code>$TABLENAME</code>位置放置你操作的数据表表名。</p><p>ResultSet.getString()函数接受字段名作为参数返回对应一条记录的该字段的值，可以以此读取信息。</p><p>上方Demo实现了读取一个数据表中id、uname、pwd字段的所有数据的JSP代码。</p><p>通过更改SQL语句可以实现更多的操作，此处不再赘述。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;驱动准备&quot;&gt;&lt;a href=&quot;#驱动准备&quot; class=&quot;headerlink&quot; title=&quot;驱动准备&quot;&gt;&lt;/a&gt;驱动准备&lt;/h2&gt;&lt;p&gt;你需要下载Java Database Connector for MySQL，本文提供一个来自于菜鸟教程的jar包，版本号为</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="后端" scheme="http://www.legr4ndk.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>于Ubuntu 18.04上配置Java Server Pages运行环境</title>
    <link href="http://www.legr4ndk.top/2020/12/11/JSPenvironment/"/>
    <id>http://www.legr4ndk.top/2020/12/11/JSPenvironment/</id>
    <published>2020-12-11T10:16:45.000Z</published>
    <updated>2020-12-11T10:18:50.207Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sudo apt update #更新软件源<br>sudo apt<span class="hljs-built_in"> upgrade </span>#更新软件包<br></code></pre></td></tr></table></figure><h3 id="Web服务器应用Apache"><a href="#Web服务器应用Apache" class="headerlink" title="Web服务器应用Apache"></a>Web服务器应用Apache</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo apt install apache2 -y <span class="hljs-comment">#安装apache2</span><br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/apache2 start <span class="hljs-comment">#启动apache2</span><br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/apache2 stop <span class="hljs-comment">#关闭apache2</span><br></code></pre></td></tr></table></figure><h3 id="Java运行时与JDK"><a href="#Java运行时与JDK" class="headerlink" title="Java运行时与JDK"></a>Java运行时与JDK</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>openjdk<span class="hljs-number">-11</span>-<span class="hljs-keyword">jdk-headless </span><span class="hljs-comment">#安装openjdk-11</span><br></code></pre></td></tr></table></figure><h3 id="Java应用服务器Tomcat"><a href="#Java应用服务器Tomcat" class="headerlink" title="Java应用服务器Tomcat"></a>Java应用服务器Tomcat</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo apt install git <span class="hljs-comment">#安装git（作为wget的依赖）</span><br>sudo apt install wget <span class="hljs-comment">#有的系统自带wget，就不用装</span><br>wget https:<span class="hljs-regexp">//mi</span>rrors.cnnic.cn<span class="hljs-regexp">/apache/</span>tomcat<span class="hljs-regexp">/tomcat-9/</span>v9.<span class="hljs-number">0.40</span><span class="hljs-regexp">/bin/</span>apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">40</span>.tar.gz<br> <span class="hljs-comment">#于cnnic镜像站下载tomcat的预编译二进制文件</span><br>tar -xzvf apache-tomcat-<span class="hljs-number">9.0</span>.<span class="hljs-number">40</span>.tar.gz <span class="hljs-comment">#解压压缩文件</span><br>sudo mv .<span class="hljs-regexp">/apache-tomcat-9.0.40 /u</span>sr<span class="hljs-regexp">/local/</span>tomcat <span class="hljs-comment">#移动所有文件到/usr/local目录下的tomcat文件夹中</span><br>sudo chmod -R <span class="hljs-number">755</span> <span class="hljs-regexp">/usr/</span>local/tomcat <span class="hljs-comment">#赋予权限</span><br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin <span class="hljs-comment">#进入存放tomcat的文件夹</span><br>vim ./startup.sh <span class="hljs-comment">#编辑startup.sh脚本</span><br><span class="hljs-comment"># 最后一行加上：</span><br><span class="hljs-comment">#tomcat</span><br>export TOMCAT_HOME=<span class="hljs-regexp">/usr/</span>local/tomcat<br><span class="hljs-comment"># 保存退出</span><br>sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin/startup.sh <span class="hljs-comment">#启动tomcat</span><br>sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/tomcat/</span>bin/shutdown.sh <span class="hljs-comment">#关闭tomcat</span><br></code></pre></td></tr></table></figure><h3 id="数据库MySQL"><a href="#数据库MySQL" class="headerlink" title="数据库MySQL"></a>数据库MySQL</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> install mysql-server #安装mysql-server<br>sudo mysql -uroot -p #root用户登陆mysql-clinet，默认无密码<br><span class="hljs-comment">#执行以下操作以自订密码</span><br>use mysql;<br>update<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">authentication_string</span>=PASSWORD(&quot;自定义密码&quot;) where <span class="hljs-attribute">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br>update<span class="hljs-built_in"> user </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">plugin</span>=<span class="hljs-string">&quot;mysql_native_password&quot;</span>;<br>flush privileges;<br>quit;<br><span class="hljs-comment">#退出mysql</span><br>sudo /etc/init.d/ mysql start #启动mysql<br>sudo /etc/init.d/ mysql stop #关闭mysql<br>sudo /etc/init.d/ mysql restart #重启mysql<br><br><span class="hljs-comment">#要创建新的mysql用户</span><br>CREATE<span class="hljs-built_in"> USER </span><span class="hljs-string">&#x27;username&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;password&#x27;</span>;<br><span class="hljs-comment">#username：用户名，host：指定该用户在哪个主机上可以登陆，本地用户用localhost，从任意远程主机登陆，可以使用通配符%，password：用户密码</span><br></code></pre></td></tr></table></figure><hr><blockquote><p>启动Apache和Tomcat之后可以在80端口看到apache的it works界面，8080端口可以看到位于 <strong>/usr/local/tomcat/webapps/ROOT/</strong> 的网页，可以自己放jsp文件于次文件夹，以对于域名的相对地址访问。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;更新系统&quot;&gt;&lt;a href=&quot;#更新系统&quot; class=&quot;headerlink&quot; title=&quot;更新系统&quot;&gt;&lt;/a&gt;更新系统&lt;/h3&gt;&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;p</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="后端" scheme="http://www.legr4ndk.top/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>在网页文件中引入Bootstrap</title>
    <link href="http://www.legr4ndk.top/2020/12/09/IncludeBootstrap/"/>
    <id>http://www.legr4ndk.top/2020/12/09/IncludeBootstrap/</id>
    <published>2020-12-09T15:27:58.000Z</published>
    <updated>2020-12-21T04:57:22.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>文件均使用了在Staticfile CDN上的镜像</strong></p></blockquote><h3 id="在文件中引入Bootstrap3的库"><a href="#在文件中引入Bootstrap3的库" class="headerlink" title="在文件中引入Bootstrap3的库"></a>在文件中引入Bootstrap3的库</h3><p>以下内容请放入html文件的<code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 引入 Bootstrap --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- HTML5 Shiv 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 --&gt;</span><br>      <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">         &lt;script src=&quot;https://cdn.staticfile.org/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">         &lt;script src=&quot;https://cdn.staticfile.org/respond.js/1.3.0/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;![endif]--&gt;</span><br></code></pre></td></tr></table></figure><p>以下内容请放入html文件的<code>&lt;body&gt;</code>与<code>&lt;/body&gt;</code>之间：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 包括所有已编译的插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Bootstrap4版的库文件链接："><a href="#Bootstrap4版的库文件链接：" class="headerlink" title="Bootstrap4版的库文件链接："></a>Bootstrap4版的库文件链接：</h3><p>以下内容请放入html文件的<code>&lt;head&gt;</code>与<code>&lt;/head&gt;</code>之间：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 新 Bootstrap4 核心 CSS 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/css/bootstrap.min.css&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- HTML5 Shiv 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 注意： 如果通过 file://  引入 Respond.js 文件，则该文件无法起效果 --&gt;</span><br>      <span class="hljs-comment">&lt;!--[if lt IE 9]&gt;</span><br><span class="hljs-comment">         &lt;script src=&quot;https://cdn.staticfile.org/html5shiv/3.7.0/html5shiv.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">         &lt;script src=&quot;https://cdn.staticfile.org/respond.js/1.3.0/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">      &lt;![endif]--&gt;</span><br></code></pre></td></tr></table></figure><p>以下内容请放入html文件的<code>&lt;body&gt;</code>与<code>&lt;/body&gt;</code>之间：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- bootstrap.bundle.min.js 用于弹窗、提示、下拉菜单，包含了 popper.min.js --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.bundle.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!-- 最新的 Bootstrap4 核心 JavaScript 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/4.3.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件均使用了在Staticfile CDN上的镜像&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;在文件中引入Bootstrap3的库&quot;&gt;&lt;a href=&quot;#在文件中引入Bootstrap3的库&quot; class</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="前端" scheme="http://www.legr4ndk.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>注 入 怨 念</title>
    <link href="http://www.legr4ndk.top/2020/11/27/EssayP/"/>
    <id>http://www.legr4ndk.top/2020/11/27/EssayP/</id>
    <published>2020-11-27T15:23:06.000Z</published>
    <updated>2020-12-04T12:12:36.849Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到一首很有感觉的诗，且放在这边：</p><blockquote><p>我把子弹穿破胸膛<br>我的眼睛被鲸鲨咬碎<br>口腔被灌满砒霜溃疡<br>双手砍断滚在床下<br>少女把头颅盛走<br>你就静静看着我<br>把我泡在福尔马林<br>永垂不朽</p></blockquote><p><strong>活在福尔马林里，也未尝不是永垂不朽。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看到一首很有感觉的诗，且放在这边：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我把子弹穿破胸膛&lt;br&gt;我的眼睛被鲸鲨咬碎&lt;br&gt;口腔被灌满砒霜溃疡&lt;br&gt;双手砍断滚在床下&lt;br&gt;少女把头颅盛走&lt;br&gt;你就静静看着我&lt;br&gt;把我泡在福尔马林&lt;br&gt;永垂不朽&lt;/p&gt;
&lt;/bl</summary>
      
    
    
    
    <category term="Poet" scheme="http://www.legr4ndk.top/categories/Poet/"/>
    
    
    <category term="文艺" scheme="http://www.legr4ndk.top/tags/%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>马保国日语版</title>
    <link href="http://www.legr4ndk.top/2020/11/24/masensei/"/>
    <id>http://www.legr4ndk.top/2020/11/24/masensei/</id>
    <published>2020-11-24T13:36:30.000Z</published>
    <updated>2020-12-05T04:08:40.957Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原视频见于<a href="https://www.bilibili.com/video/BV1QV411a75M">Bilibili</a></p><p>此处只是靠听力和字幕扒取了台词</p><p>止增笑耳</p></blockquote><p>こんにちは</p><p>俺(おれ)は太極(たいきょく)マスター</p><p>马(mǎ) 保(bǎo) 国(guó)</p><p>今(いま)　友達(ともだち)が「先生(せんせい)どうしたの」と</p><p>俺(おれ)は「何(なに)が」と</p><p>写真(しゃしん)が何枚来(なんまいき)た</p><p>俺見(おれみ)たと</p><p>お！</p><p>それは昨日(きのう)</p><p>二人(ふたり)の若(わか)もん</p><p>３０ぐらい</p><p>一人体重(ひとりたいじゅう)９０キロ</p><p>一人体重(ひとりたいじゅう)８０キロ</p><p>彼(かれ)ら</p><p>一人(ひとり)</p><p>「俺(おれ)、ジム(じむ)で運動(うんどう)、首(くび)がひねった、馬先生(うませんせい)、太極(たいきょく)を気功(きこう)を、教(おし)えてくれない？」</p><p>俺(おれ)は「いい」と</p><p>おれは「君(きみ)の筋(きん)トレ效(き)かない」</p><p>彼(かれ)は不満(ふまん)</p><p>俺(おれ)は「子供(こども)よ、両手(りょうて)で俺(おれ)の指(ゆび)を折(お)ってみ」</p><p>折(お)れない</p><p>彼(かれ)は「役立(やくだ)てない」と</p><p>俺(おれ)は「役立(やくだ)てる」と</p><p>これ「化力(かりょく)」</p><p>カンフー技(わざ)</p><p>四両(よんりょう)で千斤(せんきん)を制(せい)する</p><p>２００斤(きん)の英国力士(えいこくりきし)</p><p>俺(おれ)の指(ゆび)に勝(か)てない</p><p>あ！</p><p>彼(かれ)はやってみみと</p><p>俺(おれ)はオッケーと</p><p>そして彼(かれ)ガーと立(た)て</p><p>速(はや)いあ！</p><p>そして続(つづ)いて</p><p>先ず左蹴(ひだりしゅう) 「ん」</p><p>次右(つぎみぎ)サイド</p><p>最後左(さいごひだり)ジャブ</p><p>俺全部(おれぜんぶ)ガードした</p><p>ガードした！</p><p>ガードしてもちろん伝統(でんとう)カンフーは切磋(せっさ)だけ  </p><p>右手鼻(みぎてはな)につけて</p><p>打(う)たない</p><p>俺笑(おれわら)って</p><p>手(て)を引(ひ)こうと</p><p>だからここで</p><p>伝統(でんとう)カンフーの切磋琢磨(せっさたくま)で</p><p>彼(かれ)はすでに負(ま)けた</p><p>もし力(ちから)いれたら</p><p>ワンパンチで彼(かれ)の鼻(はな)を折(お)った</p><p>鼻(はな)につけて打(う)たない</p><p>かれ認(みと)め</p><p>俺(おれ)は彼(かれ)の顔(かお)に行(い)った</p><p>彼(かれ)は鼻(はな)がつけられたのを知(し)らずに</p><p>俺(おれ)は顔(かお)に行ったと認(みと)めた</p><p>俺(おれ)は手(て)を引(ひ)いてやめた</p><p>彼(かれ)は不意打(ふいう)ち</p><p>左(ひだり)ジャブ俺(おれ)の顔(かお)を</p><p>俺油断(おれゆだん)したら、「迷(まよ)うさ」<strong>（没有闪）</strong></p><p>彼(かれ)の左(ひだり)パンチ俺(おれ)の目(め)…</p><p>右目(みぎめ)に擦(す)った</p><p>でも大丈夫(だいじょうぶ)</p><p>彼(かれ)も写真(しゃしん)で言(い)った</p><p>二分(にふん)ほど以降(いこう)</p><p>その場(ば)で涙出(なみだで)た</p><p>目(め)を覆(おお)って</p><p>俺(おれ)は「止(や)めて」と</p><p>二(に)分(ふん)以(い)ほ…二(に)分(ふん)以(い)降(こう)</p><p>治(なお)った</p><p>俺(おれ)はガキお前(まえ)</p><p>ジャブじゃ無駄(むだ)</p><p>しぶとう</p><p>彼(かれ)は「馬先生(ませんせい)御免御免(ごめんごめん)、俺(おれ)は素人(しろうと)」</p><p>「俺(おれ)は無鉄砲(むてっぽう)」と</p><p>彼(かれ)は無鉄砲(むてっぽう)じゃないんだ</p><p>前(まえ)キック、サイドキック</p><p>左(ひだり)パンチ、練(ね)れ者(もの)</p><p>あとで彼(かれ)は三(さん)四(よん)年(ねん)</p><p>タイ拳(こぶし)お習(なら)った</p><p>やはり　準備万端(じゅんびばんたん)<strong>（有bear来）</strong></p><p>これら　若造(わかぞう)</p><p>無駄無駄(むだむだ)<strong>（不讲武德）</strong></p><p>だ～ます</p><p>不(ふ)意(い)～打(う)ち</p><p>六(ろく)十(じゅう)九(きゅう)歳(さい)の老(ろう)人(じん)</p><p>いいのか？よくない</p><p>小(こ)僧(ぞう)　よくお前(まえ)は</p><p>恥(は)ず忘(わす)<strong>（耗子尾汁）</strong>れてます</p><p>今後(こんご)</p><p>このようなずる</p><p>小賢(こざか)しい</p><p>武林(ぶりん)は和(わ)を大事(だいじ)</p><p>ようじゃ無駄(むだ)<strong>（要讲武德）</strong></p><p>八百(はっぴゃく)るな～俺(おれ)と<strong>（不要搞窝里斗）</strong></p><p>ありがとうね！</p><hr><p>已经更新完了，还加了汉字的假名注音hh</p><p>可以拿去照着这个台本配音玩了</p><p>有部分是字幕里有但是那人没念出来的，我就给删了</p><p><strong>不是标准日语，很多语法错误，但是读着好玩就是了😂</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;原视频见于&lt;a href=&quot;https://www.bilibili.com/video/BV1QV411a75M&quot;&gt;Bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;此处只是靠听力和字幕扒取了台词&lt;/p&gt;
&lt;p&gt;止增笑耳&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="Fun" scheme="http://www.legr4ndk.top/categories/Fun/"/>
    
    
    <category term="文艺" scheme="http://www.legr4ndk.top/tags/%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
  <entry>
    <title>C#常见控件</title>
    <link href="http://www.legr4ndk.top/2020/11/22/CsharpCommonControls/"/>
    <id>http://www.legr4ndk.top/2020/11/22/CsharpCommonControls/</id>
    <published>2020-11-22T10:48:47.000Z</published>
    <updated>2020-12-05T12:48:07.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>C#的WinForm编程真的是和Visual Basic一毛一样的体验</p><p>——比隔壁C++的WinForm不知道高到哪里去了（</p></blockquote><p><strong>控件（Control）是WinForm的基本元素</strong></p><h3 id="Brief-Introduction"><a href="#Brief-Introduction" class="headerlink" title="Brief Introduction"></a>Brief Introduction</h3><p>Form控件有一个系统自动生成的一个类实例化的对象（默认叫Form1），该类自带Load事件的函数。此类定义于Form1.cs和Form1.Design.cs中。于Program.cs中另有Program.cs内定义了Main函数作为程序的起点。</p><p>常见的控件有几个基本共有的属性，如：</p><ul><li>Size：是一组共两个值，用于确定对象的宽度和高度</li><li>(Name)：相当于该对象在程序中的变量名</li><li>AutoSize：如果为True则可能造成控件某些维度的手动大小调整不可用</li><li>Location：是一组两个值，用于确定对象在窗体的位置(x,y)，窗体左上顶点为坐标原点，向右为+x，向下为+y</li></ul><h3 id="Label（标签）控件"><a href="#Label（标签）控件" class="headerlink" title="Label（标签）控件"></a>Label（标签）控件</h3><p>为控件和窗体的其它组成部分提供标识，通常用于提供描述性文字</p><p>Label控件由Label类描述，Label类继承自Control类，它在名字空间System.Windows.Forms中。</p><h4 id="Label常用属性"><a href="#Label常用属性" class="headerlink" title="Label常用属性"></a>Label常用属性</h4><ul><li>AutoElipsis：获取或者设定一个值，指示是否要在Label右边缘显示<strong>省略号</strong>表示文本超过指定长度，否则文本将被直接截断</li><li>AutoSize：获取或者设定一个值，指示是否自动调整控件大小以显示完整内容</li><li>BorderStyle：获取或设置控件的边框样式</li><li>Image：获取或设置显示在Label上的图像</li><li>Text：获取或设置与此控件相关联的文本，即显示在Label上的文本</li><li>TextAlign：获取或设置Label中文本的对齐方式</li></ul><h3 id="TextBox（文本框）控件"><a href="#TextBox（文本框）控件" class="headerlink" title="TextBox（文本框）控件"></a>TextBox（文本框）控件</h3><p>TextBox中的文本可以被编辑，而Label中的不行。</p><p>TextBox类所在的名字空间为System.Windows.Forms。</p><h4 id="TextBox常用属性"><a href="#TextBox常用属性" class="headerlink" title="TextBox常用属性"></a>TextBox常用属性</h4><ul><li>AcceptsReturn：获取或设置一个值，该值指示在多行TextBox控件中按Enter键时，是在控件中创建一行新文本还是激活窗体的默认按钮，比如用于选择按回车是输入完了还是换一行</li><li>AcceptsTab：获取或设置一个值，该值指示在多行TextBox控件中按Tab键时，是在控件中键入一个Tab字符还是按选项卡的顺序将焦点移动到下一个控件</li><li>BackColor：获取或设置控件的背景色</li><li>Focused：获取一个值，该值指示控件是否有输入焦点</li><li>Font：获取或设置控件显示的文字的字体</li><li>Multiline：获取或设置一个值，该值指示此控件是否为多行TextBox控件</li><li>PasswordChar：获取或设置字符，该字符用于屏蔽单行TextBox控件中的密码字符</li><li>ReadOnly：获取或设置一个值，该值指示文本框中的文本是否为只读</li><li>RightToLeft：获取或设置一个值，该值指示是否将控件的元素对齐以支持从右向左的字体的区域设置</li><li>SelectedText：获取或设置一个值，该值指示控件中当前选定的文本</li><li>Text：字符串，获取或设置TextBox中的当前文本</li><li>TextAlign：获取或设置控件中文本的对齐方式</li><li>TextLength：获取或设置控件中文本的长度</li><li>WordWrap：指示多行文本框控件在必要时是否自动换行到下一行开始</li></ul><h4 id="TextBox常用事件"><a href="#TextBox常用事件" class="headerlink" title="TextBox常用事件"></a>TextBox常用事件</h4><ul><li>Click：鼠标单击控件时发生</li><li>Enter：鼠标进入控件区域时发生</li><li>GotFocus：在控件得到焦点时发生</li><li>KeyDown：在控件有焦点时按下按键时发生</li><li>KeyUp：在控件有焦点时释放按键时发生</li><li>Leave：在控件失去焦点时发生</li><li>LostFocus：在控件失去焦点时发生</li><li>TextChanged：在控件的Text属性值更改时发生（文本被改变</li></ul><h3 id="Button（按钮）控件"><a href="#Button（按钮）控件" class="headerlink" title="Button（按钮）控件"></a>Button（按钮）控件</h3><p>用户可以单击按钮控件触发程序动作。</p><p>Button继承自ButtonBase类，ButtonBase继承自ContentControl类，ContentControl类继承自Control类。</p><h4 id="Button常用属性"><a href="#Button常用属性" class="headerlink" title="Button常用属性"></a>Button常用属性</h4><ul><li>ClickMode：获取或设置Click事件何时发生，ClickMode有3种<ul><li>悬停，鼠标悬停在该按钮上时激发此按钮</li><li>按下，鼠标在该按钮上按下时激发此按钮</li><li>释放，鼠标在该按钮上按下后，释放时激发此按钮</li></ul></li><li>IsCancel：获取或设置一个值，指示该Button控件是否为取消按钮。用户可以通过ESC键激活取消按钮</li><li>IsDefault：获取或设置一个值，指示该Button控件是否为默认按钮。用户可以通过Enter键调用默认按钮</li></ul><h4 id="Button常用事件"><a href="#Button常用事件" class="headerlink" title="Button常用事件"></a>Button常用事件</h4><ul><li>Click：按钮被按下时发生（最常用）</li></ul><h3 id="选项控件"><a href="#选项控件" class="headerlink" title="选项控件"></a>选项控件</h3><p>选项的作用是跟据用户的实际情况在程序运行时调整程序的状态或行为。</p><h4 id="选项控件的分类"><a href="#选项控件的分类" class="headerlink" title="选项控件的分类"></a>选项控件的分类</h4><ul><li>GroupBox（组框）</li><li>Panel（面板）</li><li>RadioButton（单选按钮）</li><li>CheckBox（复选框）</li></ul><h4 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h4><p>RadioButton（单选按钮）控件是用来让用户在一组选项中选定一项且只能选定一项。</p><p>若窗体内仅有一组RadioButton控件时，可以将它们直接放置在这个窗体内。</p><p>当有两组或多组选项时，RadioButton应该被放置到一个GroupBox（组框）控件内进行分组。</p><h5 id="RadioButton常用属性"><a href="#RadioButton常用属性" class="headerlink" title="RadioButton常用属性"></a>RadioButton常用属性</h5><ul><li>Text：设定该RadioButton旁边的文本内容</li><li>CheckAlign：设定控件按钮与文本的位置关系（对齐方式）</li><li>Checked：由它设定RadioButton的状态（bool类型，True-被选中，False-未被选中（缺省设置））</li></ul><h5 id="RadioButton常用事件"><a href="#RadioButton常用事件" class="headerlink" title="RadioButton常用事件"></a>RadioButton常用事件</h5><ul><li><p>CheckedChanged：Checked属性改变时发生（默认事件）</p><p><strong>在VS中，双击单选按钮控件，会自动添加默认事件的事件处理函数</strong></p></li></ul><h4 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h4><p>ChechBox（复选框）控件是让用户在一组选项中选定一项或多项。</p><p>若窗体内仅有一组CheckBox控件时，可以将它们直接放置在这个窗体内。</p><p>当有两组或多组选项时，CheckBox应该被放置到一个GroupBox（组框）控件内进行分组。</p><h5 id="CheckBox常用属性"><a href="#CheckBox常用属性" class="headerlink" title="CheckBox常用属性"></a>CheckBox常用属性</h5><ul><li>Text：设定该CheckBox旁边的文本内容</li><li>CheckAlign：设定控件按钮与文本的位置关系（对齐方式）</li><li>Checked：由它设定CheckBox的状态（bool类型，True-被选中，False-未被选中（缺省设置））</li><li>CheckState：指示CheckBox目前的状态，有三个取值<ul><li>Checked：表示被选中状态</li><li>Unchecked，表示未被选中状态</li><li>Indeterminate，表示不可用状态（此状态当ThreeState属性为True时有效）</li></ul></li></ul><h5 id="CheckBox常用事件"><a href="#CheckBox常用事件" class="headerlink" title="CheckBox常用事件"></a>CheckBox常用事件</h5><ul><li>CheckedChanged：Checked属性改变时发生（默认事件）</li><li>CheckedStateChanged：CheckedState属性改变时发生</li></ul><h4 id="GroupBox"><a href="#GroupBox" class="headerlink" title="GroupBox"></a>GroupBox</h4><p>GroupBox（组框）是一个容器类控件。</p><p>你可以将一组控件放入GroupBox来分类。</p><p>组框可以显示标题（文本），但是它没有滚动条。</p><p>边框一般比较细。</p><h5 id="GroupBox常用属性"><a href="#GroupBox常用属性" class="headerlink" title="GroupBox常用属性"></a>GroupBox常用属性</h5><ul><li>Controls：组框包含的控件集</li><li>Text：在组框顶部显示的标题文本</li></ul><h4 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h4><p>Panel（面板）与GroupBox类似，也是一个容器类控件。</p><p>你也可以将一组控件放入Panel来分类。</p><p>面板可以包含滚动条，但是它没有标题。</p><p>边框可以通过相关边框属性来调节。</p><h5 id="Panel常用属性"><a href="#Panel常用属性" class="headerlink" title="Panel常用属性"></a>Panel常用属性</h5><ul><li>AutoScroll：当面板由于太小而无法显示所有控件时，这个属性指定是否出现滚动条，默认值为False</li><li>BorderStyle：设置面板的边界样式，默认为None，其他选项有Fixed3D和FixedSingle</li><li>Controls：面板包含的控件集</li></ul><hr><p><strong>感觉差不多了，就这样吧！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;C#的WinForm编程真的是和Visual Basic一毛一样的体验&lt;/p&gt;
&lt;p&gt;——比隔壁C++的WinForm不知道高到哪里去了（&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;控件（Control）是WinForm的基本元素&lt;</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="做个好码农" scheme="http://www.legr4ndk.top/tags/%E5%81%9A%E4%B8%AA%E5%A5%BD%E7%A0%81%E5%86%9C/"/>
    
  </entry>
  
  <entry>
    <title>Cpp中的多态</title>
    <link href="http://www.legr4ndk.top/2020/10/23/CppPolymorphism/"/>
    <id>http://www.legr4ndk.top/2020/10/23/CppPolymorphism/</id>
    <published>2020-10-23T12:02:51.000Z</published>
    <updated>2020-12-04T12:13:14.448Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>多态是面向对象编程内极为重要的一种特征，它能极大的简化我们的代码</p></blockquote><p>先来看一段类的原型</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> //基类</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Voiceless&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//不知道该叫啥</span><br>    &#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal <span class="hljs-comment">//狗派生类，继承了Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//汪汪叫</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal <span class="hljs-comment">//猫派生类，继承了Animal</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Meow&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>; <span class="hljs-comment">//喵喵叫</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们可以看到，基类和派生类中都有函数voice()，它可以让不同的动物发出不同的叫声，其中，Dog类和Cat类的voice()函数是覆写了基类中的同名函数。</p><p>当然，还可以有很多基于Animal类的派生类，都可以有叫声，但是我们如果想统一一下让它们叫的方法，比如用个train函数，传入对象或者它的指针就可以自动调用它的voice函数。虽然Cpp支持重载函数，但是为每个不同的类各写一个这样的函数，工作量不仅大，而且枯燥。多态就是帮我们解决这个问题的。</p><p><strong>多态</strong> <em>Polymorphism</em></p><p>表现方式有两种</p><ul><li>重载多态，比如函数重载（本文不介绍了），属于静态联编</li><li>子类型多态，属于动态联编，就是我接下来要说的那些</li></ul><p>子类型多态有两个要点：</p><ol><li>虚函数</li><li>函数覆写<sub>override</sub></li></ol><p>我们来区分涉及继承链情况下的两种联编：</p><ol><li>通过派生类对象访问同名函数，是静态联编</li><li>通过基类对象的指针访问同名函数，是静态联编</li><li>通过基类对象的指针或引用访问同名虚函数，是动态联编</li></ol><p>那我们现在改一下原来的类的定义让它符合子类型多态的要求</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-comment">//此函数声明为虚函数后，派生类中无须再注明</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Voiceless&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> <span class="hljs-comment">//覆写了voice函数</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> :</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> <span class="hljs-comment">//覆写了voice函数</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Meow&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>那么还是刚刚那个例子，我们设计一个train函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train</span><span class="hljs-params">(Animal animal)</span></span><br><span class="hljs-function"></span>&#123;<br>    animal.voice();<br>&#125;<br></code></pre></td></tr></table></figure><p>使用这个函数，你会发现无论你往参数里塞了什么阿猫阿狗的对象，输出的永远是“Voiceless”，这便是静态联编的问题了，它使用的是基类的对象而非基类对象的指针或引用，你需要把train修改成这样：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train</span><span class="hljs-params">(Animal&amp; animal)</span></span><br><span class="hljs-function"></span>&#123;<br>    animal.voice();<br>&#125;<br><span class="hljs-comment">//或者这样</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">train</span><span class="hljs-params">(Animal* animal)</span></span><br><span class="hljs-function"></span>&#123;<br>    animal-&gt;voice();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后你的子类对象在调用这个train函数之后就可以正常发出正确的声音了</p><p><strong>需要注意的是，如果voice函数不是<em>虚函数</em>，那么即使你用了派生类对象的指针、引用，只要那个进入函数的东西的类型是基类，它就会调用基类的函数</strong></p><p>一句话总结一下，就是：<strong>函数虚，看对象；函数实，看类型。</strong></p><p>但是，这个东西它也有问题，就是你使用基类的指针（或者引用）指向了派生类的对象的时候，你只能调用派生类的虚函数，无法调用非虚函数，例如我改一下Dog类的定义：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> :</span> <span class="hljs-keyword">public</span> Animal<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">voice</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Woof&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span> <span class="hljs-comment">//这个不是虚函数了</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Foo!&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是我在main函数里这样定义：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">Animal ptr;<br>Dog dog = <span class="hljs-keyword">new</span> Dog();<br>ptr = &amp;dog;<br>ptr-&gt;voice(); <span class="hljs-comment">//调用的是dog对象的voice函数</span><br>ptr-&gt;foo(); <span class="hljs-comment">//无法调用，No member named foo in Animal</span><br></code></pre></td></tr></table></figure><p>Animal类的指针虽然指向了dog，但是它将无法调用dog的非虚函数，但是如果我们偏要调用属于子类的非虚函数呢？</p><p><strong>Introducing dynamic_cast!</strong></p><p>Cpp的dynamic_cast&lt;&gt;运算符可以把基类类型的指针转换为派生类的类型的指针，就可以使调用子类的非虚函数称为可能，方法如下</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">ptr-&gt;foo(); <span class="hljs-comment">//它出了问题</span><br><span class="hljs-keyword">dynamic_cast</span>&lt;Dog*&gt;(ptr)-&gt;foo(); <span class="hljs-comment">//正常调用！</span><br></code></pre></td></tr></table></figure><p>虽然建议在任何基类与派生类间的指针、引用的类型转换都使用dynamic_cast运算符，但是实际上，派生类的指针（引用）转为基类类型的指针（引用）可以不使用该运算符而隐式转换，而基类的指针（引用）转为派生类类型的指针（引用）<strong>必须</strong>显式使用该运算符以完成类型转换。</p><p>比如我们有：</p><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">Animal animal;<br>Animal* pa;<br>Cat cat;<br>Cat* pc;<br><br>pa = &amp;cat; <span class="hljs-comment">//可以隐式转换（下转上）</span><br>pc = <span class="hljs-keyword">dynamic_cast</span>&lt;Cat*&gt;(animal); <span class="hljs-comment">//必须显式转换（上转下）</span><br></code></pre></td></tr></table></figure><p>多态就先写这么多~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;多态是面向对象编程内极为重要的一种特征，它能极大的简化我们的代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来看一段类的原型&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="做个好码农" scheme="http://www.legr4ndk.top/tags/%E5%81%9A%E4%B8%AA%E5%A5%BD%E7%A0%81%E5%86%9C/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法教程</title>
    <link href="http://www.legr4ndk.top/2020/10/18/MarkdownCourse/"/>
    <id>http://www.legr4ndk.top/2020/10/18/MarkdownCourse/</id>
    <published>2020-10-18T14:11:22.000Z</published>
    <updated>2020-12-28T08:07:00.344Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章简单介绍下Markdown的基础语法，对写文章，记笔记有用</p><p>注意，Markdown排版支持大量html标签</p><hr># 大小标题（使用标题可以生成大纲）<p><strong>使用=和-标记一号和二号标题</strong></p><h1 id="我是大标题"><a href="#我是大标题" class="headerlink" title="我是大标题"></a>我是大标题</h1><h2 id="我是小标题"><a href="#我是小标题" class="headerlink" title="我是小标题"></a>我是小标题</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">我是大标题<br>=========<br>在第二行书写多个=，为一级标题<br>我是小标题<br>---------------<br>在第二行书写多个-，为二级标题<br></code></pre></td></tr></table></figure><p><strong>使用#标记1-6级标题</strong></p><h1 id="我是H1"><a href="#我是H1" class="headerlink" title="我是H1"></a>我是H1</h1><h2 id="我是H2"><a href="#我是H2" class="headerlink" title="我是H2"></a>我是H2</h2><h3 id="我是H3"><a href="#我是H3" class="headerlink" title="我是H3"></a>我是H3</h3><h4 id="我是H4"><a href="#我是H4" class="headerlink" title="我是H4"></a>我是H4</h4><h5 id="我是H5"><a href="#我是H5" class="headerlink" title="我是H5"></a>我是H5</h5><h6 id="我是H6"><a href="#我是H6" class="headerlink" title="我是H6"></a>我是H6</h6><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 我是H1</span><br><span class="hljs-section">## 我是H2</span><br><span class="hljs-section">### 我是H3</span><br><span class="hljs-section">#### 我是H4</span><br><span class="hljs-section">##### 我是H5</span><br><span class="hljs-section">###### 我是H6</span><br>是几级标题就打几个#，再跟上一个空格<br></code></pre></td></tr></table></figure><h1 id="特殊格式"><a href="#特殊格式" class="headerlink" title="特殊格式"></a>特殊格式</h1><p><em>我是斜体</em></p><p><strong>我是粗体</strong></p><p><strong><em>我是斜粗体</em></strong></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-emphasis">*我是斜体*</span><br><span class="hljs-strong">**我是粗体**</span><br><span class="hljs-strong">**<span class="hljs-emphasis">*我是斜粗体<span class="hljs-strong">**<span class="hljs-emphasis">*</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">注意，星号可以用下划线替代</span></span></span></span><br></code></pre></td></tr></table></figure><p><strong>分割线</strong>，就像这样</p><hr><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong">__<span class="hljs-emphasis">_</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">---</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">你需要使用连续三个及以上的星号、减号或者下划线来创建分割线，每个符号间可以有空格</span></span></span></span><br></code></pre></td></tr></table></figure><p><strong>下划线和删除线</strong></p><p><u>我是下划线</u></p><p><del>我是删除线</del></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>我是下划线<span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span><br>~~我是删除线~~<br>下划线使用html的u标签实现，删除线在前后加上两个~即可<br></code></pre></td></tr></table></figure><p><strong>列表</strong></p><ul><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第三项</p></li></ul><ol><li><p>第一项</p></li><li><p>第二项</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><span class="hljs-bullet">*</span> 第二项<br><span class="hljs-bullet">*</span> 第三项<br>无序列表使用星号（或者加号、减号）跟一个空格<br><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br>有序列表使用数字加一个小数点以跟一个空格<br></code></pre></td></tr></table></figure></li></ol><p><strong>区块</strong></p><blockquote><p>这是区块</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; 这是区块</span><br>大于号加一个空格<br></code></pre></td></tr></table></figure><p><strong>代码块</strong></p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">这是代码块<br>​```[language]<br><span class="hljs-meta">#Codes here</span><br>​```<br>前后三个点包围的区块，第一块三个点后面可以跟上语言的名称<br></code></pre></td></tr></table></figure><p><strong>超链接</strong></p><p><a href="https://legr4ndk.github.io/">这是指向我的博客的超链接</a></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">[<span class="hljs-string">这是指向我的博客的超链接</span>](<span class="hljs-link">https://legr4ndk.github.io/</span>)<br>方括号里是显示的字，小括号里是要跳转的链接<br>当然你也可以使用html的<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span></span>标签<br></code></pre></td></tr></table></figure><p><strong>图片</strong></p><p><img src="http://www.legr4ndk.top/img/loooong.jpg" alt="龙龙快动啊"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">![<span class="hljs-string">龙龙快动啊</span>](<span class="hljs-link">http://www.legr4ndk.top/img/loooong.jpg</span>)<br>一个感叹号直接接中括号，里面是注释文本，后面跟的小括号里面是图片路径<br>当然你也可以使用html的<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span>&gt;</span></span>标签<br></code></pre></td></tr></table></figure><p><strong>表格</strong></p><table><thead><tr><th>表头</th><th align="left">表头</th><th align="right">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td>单元格</td><td align="left">左对齐</td><td align="right">右对齐</td><td align="center">居中对齐</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">|  表头   | 表头  |  表头   | 表头  |<br>|  ----  | :----  |  ----:  | :----:  |<br>| 单元格  | 左对齐 | 右对齐  | 居中对齐 |<br>使用|来分割单元格，使用-来分割表头和其他行，使用:来确定当列的对齐方式<br>使用html的<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span></span>标签也可以做到<br></code></pre></td></tr></table></figure><hr>够你喝一壶了！]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇文章简单介绍下Markdown的基础语法，对写文章，记笔记有用&lt;/p&gt;
&lt;p&gt;注意，Markdown排版支持大量html标签&lt;/p&gt;
&lt;hr&gt;
# 大小标题（使用标题可以生成大纲）

&lt;p&gt;&lt;strong&gt;使用=和-标记一号和二号标题&lt;/strong&gt;&lt;/p&gt;
&lt;h1 </summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="Developer的自我修养" scheme="http://www.legr4ndk.top/tags/Developer%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo配合GitHub快速上线自己的个人博客</title>
    <link href="http://www.legr4ndk.top/2020/10/18/HexoCourse/"/>
    <id>http://www.legr4ndk.top/2020/10/18/HexoCourse/</id>
    <published>2020-10-18T09:05:41.000Z</published>
    <updated>2020-12-04T12:11:04.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不想买服务器却又想创造属于自己的网站？Hexo可以帮你。</p></blockquote><h2 id="啥是Hexo"><a href="#啥是Hexo" class="headerlink" title="啥是Hexo"></a>啥是Hexo</h2><p><strong>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</strong></p><p>本教程可以让你快速上线属于你自己的博客。</p><h2 id="事前准备"><a href="#事前准备" class="headerlink" title="事前准备"></a>事前准备</h2><p>你需要安装两个东西：Git和Node.js</p><p>Git的安装教程<a href="https://legr4ndk.github.io/2020/10/16/GitPushBriefIntroduction/#Install-git-may-need-root-permission">在这儿</a>。</p><p>Node.js可以直接<a href="https://nodejs.org/zh-cn/">在这儿</a>下载，不要忘记把它加到环境变量中去。</p><p>安装完之后可以在命令行中输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ git --version #输入这个，下面是显示的内容<br>git version 2.28.0.windows.1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ npm --version #输入这个，下面是显示的内容<br>6.14.8<br></code></pre></td></tr></table></figure><p>如果均有回显版本号（可能你的版本和我的不一样），那么就说明安装成功了。</p><p>接下来因为要用到npm这个包管理器，所以先给npm的镜像站点换成国内的淘宝源，命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>然后准备工作就全部完成了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>需要以下几个命名，按顺序执行就行了：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ npm install hexo -g #安装hexo<br>➜ npm install hexo-deployer-git --save #安装hexo的一个插件包，用于Git部署<br></code></pre></td></tr></table></figure><p>安装完之后，你需要建立一个文件夹专门用来存放你的博客的文件，然后打开那个文件夹，在该文件夹里打开命令行窗口（Windows用户可以选择通过按住Shift并在文件夹窗口空白地区右键来打开PowerShell），现在需要初始化你的网站，命令行输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo init #初始化hexo站点，init=initialize<br></code></pre></td></tr></table></figure><p>此命令会从远程仓库克隆基础的Hexo站点模板，视你的网络条件（你懂）此过程可能持续数分钟，然后你的文件夹里会多很多文件，主文件夹结构大致如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">├─node_modules #太大了不展开了<br>├─scaffolds<br>├─source #要展示在网页上的资源文件<br>│  └─_posts #存放博客内的博文和媒体文件，博文以markdown存储<br>└─themes #存放主题文件，自带一个landscape主题，此处以它为例，如果要用其他主题也请放入这边<br>    └─landscape #主题存放文件夹，此处有主题的配置文件_config.yml<br>        ├─languages<br>        ├─layout<br>        │  ├─_partial<br>        │  │  └─post<br>        │  └─_widget<br>        ├─scripts<br>        └─source<br>            ├─css<br>            │  ├─fonts<br>            │  ├─images<br>            │  ├─_partial<br>            │  └─_util<br>            ├─fancybox<br>            │  └─helpers<br>            └─js<br></code></pre></td></tr></table></figure><p>然后，你可以在命令行执行以下语句来清理已有网站内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo clean<br></code></pre></td></tr></table></figure><h2 id="正式使用Hexo"><a href="#正式使用Hexo" class="headerlink" title="正式使用Hexo"></a>正式使用Hexo</h2><p>先介绍几个Hexo使用的基本命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo generate #或者 hexo g，用来跟据你写好的md博文生成新的网页文件并链接<br>➜ hexo server #或者hexo s,用于在本地的4000端口（127.0.0.1:4000）实时预览你的网页<br>➜ hexo new &#x27;xxx&#x27; #新建博文，会在主文件夹/source/_posts文件夹下创建xxx.md与同名媒体文件夹<br></code></pre></td></tr></table></figure><p>编辑博文请在md文件内，博文的资源文件（如图片）请放到同名文件夹中并在md文件中使用相对地址链接来完成（比如./xxx/233.jpg)。</p><p><strong>——————那么做到这步我就假定你已经在刚刚生成的.md文件中写完文章了——————</strong></p><h2 id="部署Hexo博客到GitHub"><a href="#部署Hexo博客到GitHub" class="headerlink" title="部署Hexo博客到GitHub"></a>部署Hexo博客到GitHub</h2><p>毫无疑问你得先注册个GitHub，如果还没有的话，<a href="https://github.com/">点这里去注册</a>。</p><p>然后新建一个仓库，注意这个仓库必须是开源的，而且名字有一定要求：<strong>必须是 用户名.github.io</strong></p><p>例如我的GitHub的id是legr4ndk，那么我的仓库名就是legr4ndk.github.io。</p><p>新建仓库之后，你可以在仓库里找到你仓库的链接，就像这样：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/YourGithubID/</span>YourRepoName.git<br></code></pre></td></tr></table></figure><p>然后打开你的本地Hexo文件夹，有个_config.yml文件（注意不是主题文件夹里的那个），使用你的代码编辑器打开它，划到最下面有个deploy标签，你需要编辑一下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs _config.yml">#原来是这样的<br>deploy:<br>  type: &#39;&#39;<br>  <br>#你需要把它改成<br>deploy:<br>  type: &#39;git&#39;<br>  repository: https:&#x2F;&#x2F;github.com&#x2F;YourGithubID&#x2F;YourRepoName.git #这边写的是你的仓库链接，我这个只是范例<br> <br> #注意冒号之后有空格<br></code></pre></td></tr></table></figure><p>第16行还有个标签叫url，你需要把后面的值改成你的仓库名称，比如这样：</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs _config.yml">url: http:&#x2F;&#x2F;YourGithubID.github.io<br></code></pre></td></tr></table></figure><p>然后保存即可。</p><p>在部署前你必须使用<strong>hexo g</strong>重新生成网页文件。你可以运行<strong>hexo s</strong>命令先在本地检查你的网站还有没有问题。</p><p>部署使用一个命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">➜ hexo deploy #或者hexo d，把本地生成的文件部署到GitHub上<br></code></pre></td></tr></table></figure><p>如果你是第一次在命令行上面使用GitHub，那么将会有一个弹窗要求你登录你的GitHub，之后，你的网站将会被推送到GitHub上。过几分钟你就可以通过你的仓库名作为URL访问你的网站了。比如我的网站的地址就是<a href="https://legr4ndk.github.io/">legr4ndk.github.io</a>。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>GitHub因为国内特殊环境可能出现无法访问，这个需要魔法上网。</li><li>每次deploy之后都需要几分钟后才能刷新观察到变化，切勿心急</li><li>每次写完新文章或者更换主题什么的之后，必须使用<em>hexo g</em>重新生成文件之后再部署</li><li>主题可以去<a href="https://hexo.io/themes/">这里</a>寻找自己喜欢的，点击主题名字可以直接跳转主题的GitHub页面，跟据上面的教程安装即可。更改主题请去本地Hexo主文件夹的_config.yml内的theme标签更改。</li><li>主题内可能有部分依赖，建议换主题后在主题文件夹的命令行内运行<strong>npm install</strong>一键安装依赖（有的主题可能不行，建议查看主题的项目下的安装教程）。</li></ol><p>到此为止你已经可以上线一个基础的个人网站了，接下来就是跟据主题的README.md文件介绍的那样去自己订制网页了。</p><p>Have fun~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不想买服务器却又想创造属于自己的网站？Hexo可以帮你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;啥是Hexo&quot;&gt;&lt;a href=&quot;#啥是Hexo&quot; class=&quot;headerlink&quot; title=&quot;啥是Hexo&quot;&gt;&lt;/a&gt;啥是Hex</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="Developer的自我修养" scheme="http://www.legr4ndk.top/tags/Developer%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>C语言数字、指针、布尔值灵活利用的典范</title>
    <link href="http://www.legr4ndk.top/2020/10/17/TheCLanguageIsSoNB/"/>
    <id>http://www.legr4ndk.top/2020/10/17/TheCLanguageIsSoNB/</id>
    <published>2020-10-16T16:12:19.000Z</published>
    <updated>2020-12-04T12:13:54.722Z</updated>
    
    <content type="html"><![CDATA[<p>先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。</p><p>实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样：</p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) <span class="hljs-comment">//输出到最后一个数字了</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们利用一个if语句来判断是否输出到最后一个数字，来选择是否输出占位的空格。事实上，也可以对第一个数字特殊对待，然后剩余数据输出时附带一个空格。</p><p><strong>但是如果我们这么做呢：</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> arr[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span> + !i, arr[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>极其简单的几句话完成了我们之前要的操作，一气呵成。</p><p>我详细叙述下它的过程：</p><p>玄机在于printf语句的那个加法上。C语言的字符串常量作参数，实际上是一个指向常量池中该字符串的指针，也就是可以进行运算。然后就是一个!i，这是把C语言中的整型数据当布尔值来看待，对他取非。当循环第一趟时，i=0，0在C语言中是false，非i得到true，默认为1，当那个指针+1，指针就从原来的指向空格，变成指向“%d”，那么就不会输出空格。而当之后几轮时，i均为非0数，C语言中为true，那么取非则得到false，即0，那么原指针+0，就是它本身，也就会正常输出空格，最后达到我们的要求。</p><p>这种写法说实话有很大局限性，可读性也极差，但是却很好的体现了C语言的灵活之处。C语言对数据和内存的操作极为灵活，这就要求使用者有很高的水平。这种写法不推荐在正式的程序设计中使用，但是对于开拓思维、优化程序是很有帮助的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。&lt;/p&gt;
&lt;p&gt;实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="做个好码农" scheme="http://www.legr4ndk.top/tags/%E5%81%9A%E4%B8%AA%E5%A5%BD%E7%A0%81%E5%86%9C/"/>
    
  </entry>
  
  <entry>
    <title>Use git to push your code to your Github&#39;s repository</title>
    <link href="http://www.legr4ndk.top/2020/10/16/GitPushBriefIntroduction/"/>
    <id>http://www.legr4ndk.top/2020/10/16/GitPushBriefIntroduction/</id>
    <published>2020-10-16T15:45:05.000Z</published>
    <updated>2020-12-04T12:11:31.677Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>First things first,install git.</p><p>——Stop BBing if you have not even installed the git.</p></blockquote><h3 id="Install-git-may-need-root-permission"><a href="#Install-git-may-need-root-permission" class="headerlink" title="Install git(may need root permission)"></a>Install git(may need root permission)</h3><ul><li>Ubuntu/Debian/Deepin: <strong>apt install git</strong></li><li>Arch/Manjaro:<strong>pacman -S git</strong></li><li>Free BSD:<strong>pkg install git</strong></li><li>macOS:<strong>brew install git</strong></li><li>Windows:Click <a href="https://git-scm.com/downloads">HERE</a> to download the installer</li></ul><p>Run <strong>git –version</strong> to make sure that git is installed on your device.</p><h3 id="Put-your-codes-to-a-folder-and-initialize"><a href="#Put-your-codes-to-a-folder-and-initialize" class="headerlink" title="Put your codes to a folder and initialize"></a>Put your codes to a folder and initialize</h3><p>Now you can copy+paste all your code that need to be pushed to the Github in your new folder.Then run a terminal in this folder.</p><p>Using <strong>git init</strong> to initial your local repository.</p><p>And do not forget to add a new repository in your Github account.Once you added a new repository to your Github,you will get a repository-link just like this:</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/YourGithubID/</span>YourRepoName.git<br></code></pre></td></tr></table></figure><p>Now,run <strong>git remote add origin $YourRepoLink</strong> to link your remote repository to the local one.</p><h3 id="Add-your-files-to-staging-area"><a href="#Add-your-files-to-staging-area" class="headerlink" title="Add your files to staging area"></a>Add your files to staging area</h3><p>Use <strong>git add $Filename</strong> to add the files you need to staging area. Or you can use <strong>git add .</strong> (THERE IS A DOT AT THE END) to add all your files。</p><p>Then run <strong>git status</strong> to check the files in your local repository.</p><p>Run <strong>git commit -m ‘$YourCommits’</strong> to add some commits to this submit.</p><h3 id="Push-your-code-to-Github"><a href="#Push-your-code-to-Github" class="headerlink" title="Push your code to Github"></a>Push your code to Github</h3><p>First of all,use <strong>git pull origin master</strong> to pull your online repository.</p><p>Use <strong>git push origin master</strong> to submit your files to Github.</p><p>There are some cases that you will meet the ERROR that <em>refusing to merge unrelated histories</em> when you pull.You can try <strong>git pull origin master –allow-unrelated-histories</strong> to allow merging two unrelated branches.(At the first time,the online repository is empty but the local one have some files,so of course they are unrelated).</p><p>Now you can check your new repository on the Github.</p><p>Done,enjoy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;First things first,install git.&lt;/p&gt;
&lt;p&gt;——Stop BBing if you have not even installed the git.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Instal</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="Developer的自我修养" scheme="http://www.legr4ndk.top/tags/Developer%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>命名规则与驼峰命名法</title>
    <link href="http://www.legr4ndk.top/2020/10/16/NamingRuleAndCamelCase/"/>
    <id>http://www.legr4ndk.top/2020/10/16/NamingRuleAndCamelCase/</id>
    <published>2020-10-16T13:44:37.000Z</published>
    <updated>2020-12-04T12:13:40.548Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？</p><p>——Introducing Camel-Case：驼峰命名法</p></blockquote><p>我们现在先来看看一个例子：</p><p>假如我们想要定义一个变量存储我们的名字，该怎么命名呢？</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mylastname</span><br></code></pre></td></tr></table></figure><p>构成这个变量名的所有字母都通过小写被粗暴地整合在了一起，很难一眼看清，对吧？这种变量命名方法明显地降低了代码的可读性。要不，我们拆分一下单词？</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">my_last_mane</span><br></code></pre></td></tr></table></figure><p>显而易见地，这个变量名的可读性比上面那种高了很多，我们可以轻易地读出它的各个单词并且很清楚地知道它的意思。但是很显然，这不够紧凑，我们还得多打两个字符（吐槽下这下划线真的不是很好按）。</p><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>驼峰命名法的命名规格极为形象，通过大小写像驼峰一样变换来实现单词的区分，更方便直观地表示变量名。</p><p>那我们来看看驼峰命名法该怎么用：</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">myLastName</span><br></code></pre></td></tr></table></figure><p>相比于前两种，驼峰命名法既直观又紧凑，保证了代码可读性的同时也兼顾了效率。</p><p>驼峰命名法的规则是这样的： 当变量名或函数名是由多个单词连结在一起，构成的唯一识别字时，每一节个单词的首字母都采用大写来区分，单词与单词之间不额外添加下划线。</p><p>而以第一个单词的首字母是否要大写为区分，我们又可以分成大驼峰法和小驼峰法。</p><h4 id="大驼峰法："><a href="#大驼峰法：" class="headerlink" title="大驼峰法："></a>大驼峰法：</h4><p>包括第一个单词在内的所有单词的首字母全部大写，如：</p><ul><li>MyLastName</li><li>DataBaseUser</li></ul><h4 id="小驼峰法："><a href="#小驼峰法：" class="headerlink" title="小驼峰法："></a>小驼峰法：</h4><p>第一个单词的首字母不大写，其余每个单词的首字母均大写，如：</p><ul><li>myLastName</li><li>studentsAverageGrades</li></ul><p>驼峰命名法就介绍到这里。</p><hr><p>接下来再讲讲我使用的一种命名规则。</p><blockquote><p>强烈建议使用英文命名！！！</p></blockquote><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>变量名的命名，首先应该是这个变量要储存的内容的英文意思。借助你强大的英文水平，先把你想好的中文变量名翻译成英文，不会的话就借助翻译软件吧。</p><p>然后，如果你翻译出来的内容仅由1个英文单词构成，请直接以这个单词的<strong>完全小写</strong>的形式命名这个变量。如果是由多个单词组成的词组，应该使用<strong>小驼峰法</strong>的方式为这个变量命名。 记住，它应该是个名词或者名词性词组。 例如：</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">salary,</span>tax,carSum,taxRate<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>特殊地，给布尔类型的变量命名，建议使用 is + 属性名的方法，依照具体的语境，也可以用can，have，should等前缀代替is，同样使用小驼峰法。同时要记得避免使用否定词。</strong>例如：</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">isReal,</span>isHigh<span class="hljs-comment">;(√)</span><br><span class="hljs-built_in">isNotTall,</span>isError<span class="hljs-comment">;(×)</span><br></code></pre></td></tr></table></figure><h3 id="常量的命名规则"><a href="#常量的命名规则" class="headerlink" title="常量的命名规则"></a>常量的命名规则</h3><p>常量一般是指使用const关键字修饰定义的数据，有时也只使用预处理宏#define定义的数据。</p><h4 id="使用const关键字定义的常量"><a href="#使用const关键字定义的常量" class="headerlink" title="使用const关键字定义的常量"></a>使用const关键字定义的常量</h4><p>它的命名规则和变量类似，但是要使用<strong>大驼峰法</strong>，即第一个单词的首字母也要大写。例如：</p><figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">Line</span>,SavingAccount,<span class="hljs-built_in">Pi</span>;<br></code></pre></td></tr></table></figure><h4 id="使用-define关键字宏定义的常量"><a href="#使用-define关键字宏定义的常量" class="headerlink" title="使用#define关键字宏定义的常量"></a>使用#define关键字宏定义的常量</h4><p>它的所有字母都应该采用<strong>大写</strong>，同时，若是由多个单词组成的变量名，为了区分每个单词，在<strong>每两个单词之间应该添加下划线</strong>。例如：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-literal">PI</span>,MAX_SIZE;<br></code></pre></td></tr></table></figure><h3 id="函数-方法的命名规则"><a href="#函数-方法的命名规则" class="headerlink" title="函数/方法的命名规则"></a>函数/方法的命名规则</h3><p>函数的名称应该是一个动词或者一个动词词组。如果函数名仅由单个单词构成，那么请以这个单词的<strong>完全小写形式</strong>命名这个函数。如果这个函数名是一个动词词组，请以<strong>小驼峰法</strong>的方式命名这个函数。例如：</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">getArea,</span>setPath,takeSteps<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="名字空间的命名规则（C-）"><a href="#名字空间的命名规则（C-）" class="headerlink" title="名字空间的命名规则（C++）"></a>名字空间的命名规则（C++）</h3><p>对于名字空间，请以一个英文单词完成对它的命名，而且，应该使用它的<strong>完全小写形式</strong>。例如：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">model</span>,<span class="hljs-meta">common</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="结构、类（C-）的命名规则"><a href="#结构、类（C-）的命名规则" class="headerlink" title="结构、类（C++）的命名规则"></a>结构、类（C++）的命名规则</h3><p>结构体和类的名称应该是一个名词或者名词性词组。若使用单个单词命名，请首字母大写；若使用词组，应使用<strong>大驼峰法</strong>命名。例如：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">Node</span><span class="hljs-title">,SomeClass</span>;<br></code></pre></td></tr></table></figure><p>但是，命名结构和类形成的实例（结构体和对象）时，应该依照一般的变量的命名法进行命名。</p><h3 id="对于枚举类型（以enum关键词声明）"><a href="#对于枚举类型（以enum关键词声明）" class="headerlink" title="对于枚举类型（以enum关键词声明）"></a>对于枚举类型（以enum关键词声明）</h3><p>同样建议使用名词或者名词性词组，以首字母大写或者大驼峰法命名。</p><p>而对于枚举类型的枚举常量，建议以全部大写字母+下划线分割单词的方式命名,同时应尽量使用共同的类型名作为前缀。</p><p>例如：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Color</span> &#123; <span class="hljs-title">COLOR_RED</span>, <span class="hljs-title">COLOR_GREEN</span>, <span class="hljs-title">COLOR_BLUE</span> &#125;;</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ColorType</span> &#123; <span class="hljs-title">COLOR_TYPE_WARM</span>, <span class="hljs-title">COLOR_TYPE_COLD</span> &#125;;</span><br></code></pre></td></tr></table></figure><hr><p><strong>额外再提几个用于命名的关键字以及技巧，让代码更直观</strong></p><ul><li>get应该用在直接取得已设定值的函数中。</li><li>set应该用在直接为变量设定值的函数中。</li><li>compute应该用在用于进行计算的函数中。</li><li>find应该用在用于查找的函数中。</li><li>init/initialize应该使用在用于初始化的函数中。</li><li>在需要标识序号的变量名中，使用No + 序号比较合适。</li><li>布尔变量的命名应使用is，has等前缀，并且尽量避免否定词。</li><li>循环变量建议设置为i，j，k，并且建议优先使用i而把j，k用于循环嵌套。</li><li>对于缩略词我们有两种态度：1、对于那种缩写了人家可能就看不懂了的，比如cmd，init，请不要用缩写代替他们。2、对于那种缩写认识展开别人就看不懂的，比如HTML，CPU，老老实实写缩写。</li></ul><p><strong>另外，对于自己写的头文件的命名，推荐使用大驼峰命名法。例如</strong></p><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MyClass</span>.</span></span>h<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">CppFunction</span>.</span></span>h<br></code></pre></td></tr></table></figure><p>OK,有关命名方法先写这么多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？&lt;/p&gt;
&lt;p&gt;——Introducing Camel-Case：驼峰命名法&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="Technical" scheme="http://www.legr4ndk.top/categories/Technical/"/>
    
    
    <category term="Developer的自我修养" scheme="http://www.legr4ndk.top/tags/Developer%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.legr4ndk.top/2020/10/15/HelloWorld/"/>
    <id>http://www.legr4ndk.top/2020/10/15/HelloWorld/</id>
    <published>2020-10-15T13:36:30.000Z</published>
    <updated>2020-12-04T12:15:14.791Z</updated>
    
    <content type="html"><![CDATA[<h3>Hello World</h3>哈哈哈今天布置了一个github上的Hexo静态站点<p>准备下次写个教程（flag插好）</p><p>这次我整了两个分部，gitee和github上面我都有布置</p><p>不得不吐槽一下gitee page 是真的难用，每次更新居然要去手动刷新，时效性还特么巨低</p><p>github就是GFW的锅了，太慢了太慢了，移动甚至都不让你上去</p><p>害，这边主要搬运一些之前写在别处的文章</p><p>还有随时想写的感想，所以不能算是纯技术类博客吧</p><p>（所以这站点名字叫QQ空间哈哈哈哈）</p><p>等我更新！</p><p><strong>宰🕊祭天</strong></p><hr><p>Update:Gitee pages太【自主规制】难用了，我把那边删了，以后只在GitHub上面发表。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;Hello World&lt;/h3&gt;
哈哈哈今天布置了一个github上的Hexo静态站点

&lt;p&gt;准备下次写个教程（flag插好）&lt;/p&gt;
&lt;p&gt;这次我整了两个分部，gitee和github上面我都有布置&lt;/p&gt;
&lt;p&gt;不得不吐槽一下gitee page 是真的难用，每次更</summary>
      
    
    
    
    <category term="Misc" scheme="http://www.legr4ndk.top/categories/Misc/"/>
    
    
    <category term="文艺" scheme="http://www.legr4ndk.top/tags/%E6%96%87%E8%89%BA/"/>
    
  </entry>
  
</feed>
