<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Legrandk&#39;s Qzone</title>
  
  
  <link href="https://legrandk.gitee.io/hexo_page/atom.xml" rel="self"/>
  
  <link href="https://legrandk.gitee.io/hexo_page/"/>
  <updated>2020-10-16T16:38:50.689Z</updated>
  <id>https://legrandk.gitee.io/hexo_page/</id>
  
  <author>
    <name>Legrandk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言数字、指针、布尔值灵活利用的典范</title>
    <link href="https://legrandk.gitee.io/hexo_page/2020/10/17/C%E8%AF%AD%E8%A8%80%E6%95%B0%E5%AD%97%E3%80%81%E6%8C%87%E9%92%88%E3%80%81%E5%B8%83%E5%B0%94%E5%80%BC%E7%81%B5%E6%B4%BB%E5%88%A9%E7%94%A8%E7%9A%84%E5%85%B8%E8%8C%83/"/>
    <id>https://legrandk.gitee.io/hexo_page/2020/10/17/C%E8%AF%AD%E8%A8%80%E6%95%B0%E5%AD%97%E3%80%81%E6%8C%87%E9%92%88%E3%80%81%E5%B8%83%E5%B0%94%E5%80%BC%E7%81%B5%E6%B4%BB%E5%88%A9%E7%94%A8%E7%9A%84%E5%85%B8%E8%8C%83/</id>
    <published>2020-10-16T16:12:19.000Z</published>
    <updated>2020-10-16T16:38:50.689Z</updated>
    
    <content type="html"><![CDATA[<p>先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。</p><p>实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#include&lt;stdio.h&gt;<br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> arr[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) <span class="hljs-comment">//输出到最后一个数字了</span><br>            printf(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>        <span class="hljs-keyword">else</span><br>            printf(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>我们利用一个if语句来判断是否输出到最后一个数字，来选择是否输出占位的空格。事实上，也可以对第一个数字特殊对待，然后剩余数据输出时附带一个空格。</p><p><strong>但是如果我们这么做呢：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">#include&lt;stdio.h&gt;<br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    <span class="hljs-built_in">int</span> arr[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++)<br>        printf(<span class="hljs-string">&quot; %d&quot;</span> + !i, arr[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>极其简单的几句话完成了我们之前要的操作，一气呵成。</p><p>我详细叙述下它的过程：</p><p>玄机在于printf语句的那个加法上。C语言的字符串常量作参数，实际上是一个指向常量池中该字符串的指针，也就是可以进行运算。然后就是一个!i，这是把C语言中的整型数据当布尔值来看待，对他取非。当循环第一趟时，i=0，0在C语言中是false，非i得到true，默认为1，当那个指针+1，指针就从原来的指向空格，变成指向“%d”，那么就不会输出空格。而当之后几轮时，i均为非0数，C语言中为true，那么取非则得到false，即0，那么原指针+0，就是它本身，也就会正常输出空格，最后达到我们的要求。</p><p>这种写法说实话有很大局限性，可读性也极差，但是却很好的体现了C语言的灵活之处。C语言对数据和内存的操作极为灵活，这就要求使用者有很高的水平。这种写法不推荐在正式的程序设计中使用，但是对于开拓思维、优化程序是很有帮助的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。&lt;/p&gt;
&lt;p&gt;实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="C/C++" scheme="https://legrandk.gitee.io/hexo_page/categories/C-C/"/>
    
    
    <category term="C/C++" scheme="https://legrandk.gitee.io/hexo_page/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>命名规则与驼峰命名法</title>
    <link href="https://legrandk.gitee.io/hexo_page/2020/10/16/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E4%B8%8E%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95/"/>
    <id>https://legrandk.gitee.io/hexo_page/2020/10/16/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E4%B8%8E%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95/</id>
    <published>2020-10-16T13:44:37.000Z</published>
    <updated>2020-10-16T14:03:21.625Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？</p><p>——Introducing Camel-Case：驼峰命名法</p></blockquote><p>我们现在先来看看一个例子：</p><p>假如我们想要定义一个变量存储我们的名字，该怎么命名呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">mylastname<br></code></pre></td></tr></table></figure><p>构成这个变量名的所有字母都通过小写被粗暴地整合在了一起，很难一眼看清，对吧？这种变量命名方法明显地降低了代码的可读性。要不，我们拆分一下单词？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">my_last_mane<br></code></pre></td></tr></table></figure><p>显而易见地，这个变量名的可读性比上面那种高了很多，我们可以轻易地读出它的各个单词并且很清楚地知道它的意思。但是很显然，这不够紧凑，我们还得多打两个字符（吐槽下这下划线真的不是很好按）。</p><h3 id="驼峰命名法"><a href="#驼峰命名法" class="headerlink" title="驼峰命名法"></a>驼峰命名法</h3><p>驼峰命名法的命名规格极为形象，通过大小写像驼峰一样变换来实现单词的区分，更方便直观地表示变量名。</p><p>那我们来看看驼峰命名法该怎么用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">myLastName<br></code></pre></td></tr></table></figure><p>相比于前两种，驼峰命名法既直观又紧凑，保证了代码可读性的同时也兼顾了效率。</p><p>驼峰命名法的规则是这样的： 当变量名或函数名是由多个单词连结在一起，构成的唯一识别字时，每一节个单词的首字母都采用大写来区分，单词与单词之间不额外添加下划线。</p><p>而以第一个单词的首字母是否要大写为区分，我们又可以分成大驼峰法和小驼峰法。</p><h4 id="大驼峰法："><a href="#大驼峰法：" class="headerlink" title="大驼峰法："></a>大驼峰法：</h4><p>包括第一个单词在内的所有单词的首字母全部大写，如：</p><ul><li>MyLastName</li><li>DataBaseUser</li></ul><h4 id="小驼峰法："><a href="#小驼峰法：" class="headerlink" title="小驼峰法："></a>小驼峰法：</h4><p>第一个单词的首字母不大写，其余每个单词的首字母均大写，如：</p><ul><li>myLastName</li><li>studentsAverageGrades</li></ul><p>驼峰命名法就介绍到这里。</p><hr><p>接下来再讲讲我使用的一种命名规则。</p><blockquote><p>强烈建议使用英文命名！！！</p></blockquote><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>变量名的命名，首先应该是这个变量要储存的内容的英文意思。借助你强大的英文水平，先把你想好的中文变量名翻译成英文，不会的话就借助翻译软件吧。</p><p>然后，如果你翻译出来的内容仅由1个英文单词构成，请直接以这个单词的<strong>完全小写</strong>的形式命名这个变量。如果是由多个单词组成的词组，应该使用<strong>小驼峰法</strong>的方式为这个变量命名。 记住，它应该是个名词或者名词性词组。 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">salary,tax,carSum,taxRate;<br></code></pre></td></tr></table></figure><p><strong>特殊地，给布尔类型的变量命名，建议使用 is + 属性名的方法，依照具体的语境，也可以用can，have，should等前缀代替is，同样使用小驼峰法。同时要记得避免使用否定词。</strong>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">isReal,isHigh;(√)<br>isNotTall,isError;(×)<br></code></pre></td></tr></table></figure><h3 id="常量的命名规则"><a href="#常量的命名规则" class="headerlink" title="常量的命名规则"></a>常量的命名规则</h3><p>常量一般是指使用const关键字修饰定义的数据，有时也只使用预处理宏#define定义的数据。</p><h4 id="使用const关键字定义的常量"><a href="#使用const关键字定义的常量" class="headerlink" title="使用const关键字定义的常量"></a>使用const关键字定义的常量</h4><p>它的命名规则和变量类似，但是要使用<strong>大驼峰法</strong>，即第一个单词的首字母也要大写。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Line,SavingAccount,Pi;<br></code></pre></td></tr></table></figure><h4 id="使用-define关键字宏定义的常量"><a href="#使用-define关键字宏定义的常量" class="headerlink" title="使用#define关键字宏定义的常量"></a>使用#define关键字宏定义的常量</h4><p>它的所有字母都应该采用<strong>大写</strong>，同时，若是由多个单词组成的变量名，为了区分每个单词，在<strong>每两个单词之间应该添加下划线</strong>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">PI,MAX_SIZE;<br></code></pre></td></tr></table></figure><h3 id="函数-方法的命名规则"><a href="#函数-方法的命名规则" class="headerlink" title="函数/方法的命名规则"></a>函数/方法的命名规则</h3><p>函数的名称应该是一个动词或者一个动词词组。如果函数名仅由单个单词构成，那么请以这个单词的<strong>完全小写形式</strong>命名这个函数。如果这个函数名是一个动词词组，请以<strong>小驼峰法</strong>的方式命名这个函数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">getArea,setPath,takeSteps;<br></code></pre></td></tr></table></figure><h3 id="名字空间的命名规则（C-）"><a href="#名字空间的命名规则（C-）" class="headerlink" title="名字空间的命名规则（C++）"></a>名字空间的命名规则（C++）</h3><p>对于名字空间，请以一个英文单词完成对它的命名，而且，应该使用它的<strong>完全小写形式</strong>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">model,common;<br></code></pre></td></tr></table></figure><h3 id="结构、类（C-）的命名规则"><a href="#结构、类（C-）的命名规则" class="headerlink" title="结构、类（C++）的命名规则"></a>结构、类（C++）的命名规则</h3><p>结构体和类的名称应该是一个名词或者名词性词组。若使用单个单词命名，请首字母大写；若使用词组，应使用<strong>大驼峰法</strong>命名。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Node,SomeClass;<br></code></pre></td></tr></table></figure><p>但是，命名结构和类形成的实例（结构体和对象）时，应该依照一般的变量的命名法进行命名。</p><h3 id="对于枚举类型（以enum关键词声明）"><a href="#对于枚举类型（以enum关键词声明）" class="headerlink" title="对于枚举类型（以enum关键词声明）"></a>对于枚举类型（以enum关键词声明）</h3><p>同样建议使用名词或者名词性词组，以首字母大写或者大驼峰法命名。</p><p>而对于枚举类型的枚举常量，建议以全部大写字母+下划线分割单词的方式命名,同时应尽量使用共同的类型名作为前缀。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">enum Color &#123; COLOR_RED, COLOR_GREEN, COLOR_BLUE &#125;;<br>enum ColorType &#123; COLOR_TYPE_WARM, COLOR_TYPE_COLD &#125;;<br></code></pre></td></tr></table></figure><hr><p><strong>额外再提几个用于命名的关键字以及技巧，让代码更直观</strong></p><ul><li>get应该用在直接取得已设定值的函数中。</li><li>set应该用在直接为变量设定值的函数中。</li><li>compute应该用在用于进行计算的函数中。</li><li>find应该用在用于查找的函数中。</li><li>init/initialize应该使用在用于初始化的函数中。</li><li>在需要标识序号的变量名中，使用No + 序号比较合适。</li><li>布尔变量的命名应使用is，has等前缀，并且尽量避免否定词。</li><li>循环变量建议设置为i，j，k，并且建议优先使用i而把j，k用于循环嵌套。</li><li>对于缩略词我们有两种态度：1、对于那种缩写了人家可能就看不懂了的，比如cmd，init，请不要用缩写代替他们。2、对于那种缩写认识展开别人就看不懂的，比如HTML，CPU，老老实实写缩写。</li></ul><p><strong>另外，对于自己写的头文件的命名，推荐使用大驼峰命名法。例如</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">MyClass.h<br>CppFunction.h<br></code></pre></td></tr></table></figure><p>OK,有关命名方法先写这么多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？&lt;/p&gt;
&lt;p&gt;——Introducing Camel-Case：驼峰命名法&lt;/p&gt;
&lt;/blockquo</summary>
      
    
    
    
    <category term="Programming" scheme="https://legrandk.gitee.io/hexo_page/categories/Programming/"/>
    
    
    <category term="CamelCase" scheme="https://legrandk.gitee.io/hexo_page/tags/CamelCase/"/>
    
  </entry>
  
  <entry>
    <title>Use git to push your code to your Github&#39;s repository</title>
    <link href="https://legrandk.gitee.io/hexo_page/2020/10/15/Use-git-to-push-your-code-to-your-Githubs-repository/"/>
    <id>https://legrandk.gitee.io/hexo_page/2020/10/15/Use-git-to-push-your-code-to-your-Githubs-repository/</id>
    <published>2020-10-15T15:45:05.000Z</published>
    <updated>2020-10-16T04:05:51.994Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>First things first,install git.</p><p>——Stop BBing if you have not even installed the git.</p></blockquote><h3 id="Install-git-may-need-root-permission"><a href="#Install-git-may-need-root-permission" class="headerlink" title="Install git(may need root permission)"></a>Install git(may need root permission)</h3><ul><li>Ubuntu/Debian/Deepin: <strong>apt install git</strong></li><li>Arch/Manjaro:<strong>pacman -S git</strong></li><li>Free BSD:<strong>pkg install git</strong></li><li>macOS:<strong>brew install git</strong></li><li>Windows:Click <a href="https://git-scm.com/downloads">HERE</a> to download the installer</li></ul><p>Run <strong>git –version</strong> to make sure that git is installed on your device.</p><h3 id="Put-your-codes-to-a-folder-and-initialize"><a href="#Put-your-codes-to-a-folder-and-initialize" class="headerlink" title="Put your codes to a folder and initialize"></a>Put your codes to a folder and initialize</h3><p>Now you can copy+paste all your code that need to be pushed to the Github in your new folder.Then run a terminal in this folder.</p><p>Using <strong>git init</strong> to initial your local repository.</p><p>And do not forget to add a new repository in your Github account.Once you added a new repository to your Github,you will get a repository-link just like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">https:&#x2F;&#x2F;github.com&#x2F;YourGithubID&#x2F;YourRepoName.git<br></code></pre></td></tr></table></figure><p>Now,run <strong>git remote add origin $YourRepoLink</strong> to link your remote repository to the local one.</p><h3 id="Add-your-files-to-staging-area"><a href="#Add-your-files-to-staging-area" class="headerlink" title="Add your files to staging area"></a>Add your files to staging area</h3><p>Use <strong>git add $Filename</strong> to add the files you need to staging area. Or you can use <strong>git add .</strong> (THERE IS A DOT AT THE END) to add all your files。</p><p>Then run <strong>git status</strong> to check the files in your local repository.</p><p>Run <strong>git commit -m ‘$YourCommits’</strong> to add some commits to this submit.</p><h3 id="Push-your-code-to-Github"><a href="#Push-your-code-to-Github" class="headerlink" title="Push your code to Github"></a>Push your code to Github</h3><p>First of all,use <strong>git pull origin master</strong> to pull your online repository.</p><p>Use <strong>git push origin master</strong> to submit your files to Github.</p><p>There are some cases that you will meet the ERROR that <em>refusing to merge unrelated histories</em> when you pull.You can try <strong>git pull origin master –allow-unrelated-histories</strong> to allow merging two unrelated branches.(At the first time,the online repository is empty but the local one have some files,so of course they are unrelated).</p><p>Now you can check your new repository on the Github.</p><p>Done,enjoy.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;First things first,install git.&lt;/p&gt;
&lt;p&gt;——Stop BBing if you have not even installed the git.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Instal</summary>
      
    
    
    
    <category term="Git" scheme="https://legrandk.gitee.io/hexo_page/categories/Git/"/>
    
    
    <category term="git" scheme="https://legrandk.gitee.io/hexo_page/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://legrandk.gitee.io/hexo_page/2020/10/15/hello-world/"/>
    <id>https://legrandk.gitee.io/hexo_page/2020/10/15/hello-world/</id>
    <published>2020-10-15T14:30:10.810Z</published>
    <updated>2020-10-16T16:06:04.742Z</updated>
    
    <content type="html"><![CDATA[<h3>Hello World</h3><p>哈哈哈今天布置了一个github上的Hexo静态站点</p><p>准备下次写个教程（flag插好）</p><p>这次我整了两个分部，gitee和github上面我都有布置</p><p>不得不吐槽一下gitee page 是真的难用，每次更新居然要去手动刷新，时效性还特么巨低</p><p>github就是GFW的锅了，太慢了太慢了，移动甚至都不让你上去</p><p>害，这边主要搬运一些之前写在别处的文章</p><p>还有随时想写的感想，所以不能算是纯技术类博客吧</p><p>（所以这站点名字叫QQ空间哈哈哈哈）</p><p>等我更新！</p><p><strong>宰🕊祭天</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3&gt;Hello World&lt;/h3&gt;

&lt;p&gt;哈哈哈今天布置了一个github上的Hexo静态站点&lt;/p&gt;
&lt;p&gt;准备下次写个教程（flag插好）&lt;/p&gt;
&lt;p&gt;这次我整了两个分部，gitee和github上面我都有布置&lt;/p&gt;
&lt;p&gt;不得不吐槽一下gitee page 是真</summary>
      
    
    
    
    
  </entry>
  
</feed>
