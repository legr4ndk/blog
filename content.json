{"meta":{"title":"Legrandk's Qzone","subtitle":"","description":"","author":"Legrandk","url":"https://legr4ndk.github.io","root":"/"},"pages":[{"title":"友情链接","date":"2020-10-17T10:21:49.923Z","updated":"2020-10-17T10:21:49.923Z","comments":false,"path":"links/index.html","permalink":"https://legr4ndk.github.io/links/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-16T09:08:25.732Z","updated":"2020-10-16T09:08:25.732Z","comments":false,"path":"about/index.html","permalink":"https://legr4ndk.github.io/about/index.html","excerpt":"","text":"一只HDU的沙雕id源自曾服役120年的国际标准公斤实体Le Grand K网络空间安全专业出身，现为计算机科学与技术专业学生主要研究C++与C#游戏开发、Web应用程序后端前端苦手（泪目），日语菜鸡插着的flag永远不拔（宛如戏台上的老将军）欢迎来找我玩啊哈哈哈"},{"title":"分类","date":"2020-10-16T07:32:16.374Z","updated":"2020-10-16T07:32:16.374Z","comments":false,"path":"categories/index.html","permalink":"https://legr4ndk.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-16T07:32:16.376Z","updated":"2020-10-16T07:32:16.376Z","comments":false,"path":"tags/index.html","permalink":"https://legr4ndk.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Markdown语法教程","slug":"MarkdownCourse","date":"2020-10-18T14:11:22.000Z","updated":"2020-10-22T12:16:57.801Z","comments":true,"path":"2020/10/18/MarkdownCourse/","link":"","permalink":"https://legr4ndk.github.io/2020/10/18/MarkdownCourse/","excerpt":"","text":"这篇文章简单介绍下Markdown的基础语法，对写文章，记笔记有用 注意，Markdown排版支持大量html标签 # 大小标题（使用标题可以生成大纲） 使用=和-标记一号和二号标题 我是大标题我是小标题我是大标题=========在第二行书写多个=，为一级标题我是小标题---------------在第二行书写多个-，为二级标题 使用#标记1-6级标题 我是H1我是H2我是H3我是H4我是H5我是H6# 我是H1## 我是H2### 我是H3#### 我是H4##### 我是H5###### 我是H6是几级标题就打几个#，再跟上一个空格 特殊格式我是斜体 我是粗体 我是斜粗体 *我是斜体***我是粗体*****我是斜粗体***注意，星号可以用下划线替代 分割线，就像这样 ***___---你需要使用连续三个及以上的星号、减号或者下划线来创建分割线，每个符号间可以有空格 下划线和删除线 我是下划线 我是删除线 &lt;u&gt;我是下划线&lt;/u&gt;~~我是删除线~~下划线使用html的u标签实现，删除线在前后加上两个~即可 列表 第一项 第二项 第三项 第一项 第二项 * 第一项* 第二项* 第三项无序列表使用星号（或者加号、减号）跟一个空格1. 第一项2. 第二项有序列表使用数字加一个小数点以跟一个空格 区块 这是区块 &gt; 这是区块大于号加一个空格 代码块 这是代码块​```[language]#Codes here​```前后三个点包围的区块，第一块三个点后面可以跟上语言的名称 超链接 这是指向我的博客的超链接 [这是指向我的博客的超链接](https://legr4ndk.github.io/)方括号里是显示的字，小括号里是要跳转的链接当然你也可以使用html的&lt;a&gt;标签 图片 ![龙龙快动啊](.\\MarkdownCourse\\test.jpg)一个感叹号直接接中括号，里面是注释文本，后面跟的小括号里面是图片路径当然你也可以使用html的&lt;img&gt;标签 表格 表头 表头 表头 表头 单元格 左对齐 右对齐 居中对齐 | 表头 | 表头 | 表头 | 表头 || ---- | :---- | ----: | :----: || 单元格 | 左对齐 | 右对齐 | 居中对齐 |使用|来分割单元格，使用-来分割表头和其他行，使用:来确定当列的对齐方式使用html的&lt;table&gt;标签也可以做到 够你喝一壶了！","categories":[{"name":"Programming","slug":"Programming","permalink":"https://legr4ndk.github.io/categories/Programming/"}],"tags":[]},{"title":"用Hexo配合GitHub快速上线自己的个人博客","slug":"HexoCourse","date":"2020-10-18T09:05:41.000Z","updated":"2020-10-18T11:28:24.855Z","comments":true,"path":"2020/10/18/HexoCourse/","link":"","permalink":"https://legr4ndk.github.io/2020/10/18/HexoCourse/","excerpt":"","text":"不想买服务器却又想创造属于自己的网站？Hexo可以帮你。 啥是HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 本教程可以让你快速上线属于你自己的博客。 事前准备你需要安装两个东西：Git和Node.js Git的安装教程在这儿。 Node.js可以直接在这儿下载，不要忘记把它加到环境变量中去。 安装完之后可以在命令行中输入 ➜ git --version #输入这个，下面是显示的内容git version 2.28.0.windows.1 ➜ npm --version #输入这个，下面是显示的内容6.14.8 如果均有回显版本号（可能你的版本和我的不一样），那么就说明安装成功了。 接下来因为要用到npm这个包管理器，所以先给npm的镜像站点换成国内的淘宝源，命令如下： ➜ npm config set registry https://registry.npm.taobao.org 然后准备工作就全部完成了。 安装Hexo需要以下几个命名，按顺序执行就行了： ➜ npm install hexo -g #安装hexo➜ npm install hexo-deployer-git --save #安装hexo的一个插件包，用于Git部署 安装完之后，你需要建立一个文件夹专门用来存放你的博客的文件，然后打开那个文件夹，在该文件夹里打开命令行窗口（Windows用户可以选择通过按住Shift并在文件夹窗口空白地区右键来打开PowerShell），现在需要初始化你的网站，命令行输入： ➜ hexo init #初始化hexo站点，init=initialize 此命令会从远程仓库克隆基础的Hexo站点模板，视你的网络条件（你懂）此过程可能持续数分钟，然后你的文件夹里会多很多文件，主文件夹结构大致如下： ├─node_modules #太大了不展开了├─scaffolds├─source #要展示在网页上的资源文件│ └─_posts #存放博客内的博文和媒体文件，博文以markdown存储└─themes #存放主题文件，自带一个landscape主题，此处以它为例，如果要用其他主题也请放入这边 └─landscape #主题存放文件夹，此处有主题的配置文件_config.yml ├─languages ├─layout │ ├─_partial │ │ └─post │ └─_widget ├─scripts └─source ├─css │ ├─fonts │ ├─images │ ├─_partial │ └─_util ├─fancybox │ └─helpers └─js 然后，你可以在命令行执行以下语句来清理已有网站内容 ➜ hexo clean 正式使用Hexo先介绍几个Hexo使用的基本命令： ➜ hexo generate #或者 hexo g，用来跟据你写好的md博文生成新的网页文件并链接➜ hexo server #或者hexo s,用于在本地的4000端口（127.0.0.1:4000）实时预览你的网页➜ hexo new &#x27;xxx&#x27; #新建博文，会在主文件夹/source/_posts文件夹下创建xxx.md与同名媒体文件夹 编辑博文请在md文件内，博文的资源文件（如图片）请放到同名文件夹中并在md文件中使用相对地址链接来完成（比如./xxx/233.jpg)。 ——————那么做到这步我就假定你已经在刚刚生成的.md文件中写完文章了—————— 部署Hexo博客到GitHub毫无疑问你得先注册个GitHub，如果还没有的话，点这里去注册。 然后新建一个仓库，注意这个仓库必须是开源的，而且名字有一定要求：必须是 用户名.github.io 例如我的GitHub的id是legr4ndk，那么我的仓库名就是legr4ndk.github.io。 新建仓库之后，你可以在仓库里找到你仓库的链接，就像这样： https://github.com/YourGithubID/YourRepoName.git 然后打开你的本地Hexo文件夹，有个_config.yml文件（注意不是主题文件夹里的那个），使用你的代码编辑器打开它，划到最下面有个deploy标签，你需要编辑一下： #原来是这样的deploy: type: &#39;&#39; #你需要把它改成deploy: type: &#39;git&#39; repository: https:&#x2F;&#x2F;github.com&#x2F;YourGithubID&#x2F;YourRepoName.git #这边写的是你的仓库链接，我这个只是范例 #注意冒号之后有空格 第16行还有个标签叫url，你需要把后面的值改成你的仓库名称，比如这样： url: http:&#x2F;&#x2F;YourGithubID.github.io 然后保存即可。 在部署前你必须使用hexo g重新生成网页文件。你可以运行hexo s命令先在本地检查你的网站还有没有问题。 部署使用一个命令： ➜ hexo deploy #或者hexo d，把本地生成的文件部署到GitHub上 如果你是第一次在命令行上面使用GitHub，那么将会有一个弹窗要求你登录你的GitHub，之后，你的网站将会被推送到GitHub上。过几分钟你就可以通过你的仓库名作为URL访问你的网站了。比如我的网站的地址就是legr4ndk.github.io。 注意事项 GitHub因为国内特殊环境可能出现无法访问，这个需要魔法上网。 每次deploy之后都需要几分钟后才能刷新观察到变化，切勿心急 每次写完新文章或者更换主题什么的之后，必须使用hexo g重新生成文件之后再部署 主题可以去这里寻找自己喜欢的，点击主题名字可以直接跳转主题的GitHub页面，跟据上面的教程安装即可。更改主题请去本地Hexo主文件夹的_config.yml内的theme标签更改。 主题内可能有部分依赖，建议换主题后在主题文件夹的命令行内运行npm install一键安装依赖（有的主题可能不行，建议查看主题的项目下的安装教程）。 到此为止你已经可以上线一个基础的个人网站了，接下来就是跟据主题的README.md文件介绍的那样去自己订制网页了。 Have fun~","categories":[{"name":"Git","slug":"Git","permalink":"https://legr4ndk.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://legr4ndk.github.io/tags/git/"}]},{"title":"Essay1","slug":"Essay1","date":"2020-10-17T13:19:02.000Z","updated":"2020-10-18T05:27:20.687Z","comments":true,"path":"2020/10/17/Essay1/","link":"","permalink":"https://legr4ndk.github.io/2020/10/17/Essay1/","excerpt":"","text":"越是了解一个人，就会越看到这个人产出的屎。 这是我在朋友的博客上看到的一句话，能看到这篇文章的应该都是些熟悉我的人，那么我便也如法炮制一下，在这边记录一波我产出的屎吧。 昨天有个学弟告诉我，他报名的两个学生组织类社团他全都落选了，他现在没社团进了该咋办。我虽然出发点不同，但我的现实情况其实和他有点相似。我一直是对学生组织类社团有些嗤之以鼻的，那些社团总会占用我大把的私人时间去做一些我认为无意义的活动，乃至高频次的聚餐和团建，说实话真让我这个“社恐”唯恐避之不及。再加上大一竞选班长的糟心事儿，我简直是快要彻底丧失了“为人民服务”的念头了。那个时候我也挺懊恼的，我说不来别人口里那种高大上的话，还有点办事不经夸。害，就这么去了好了。总之，我大一最后就参加了一个社团：IT俱乐部，这社团名字看起来似乎很“高大上”，本质上其实就是一个修电脑的社团。事情少，办实事，时间自由，正好符合我对社团的三大愿景。而且我其实也挺乐意帮同学解决电脑上的一些问题的，最后就留在了那边。其他的诸如轮滑社什么的，多少都因为过于频繁的社团活动把我劝退了。 现在想想，单一社团对我而言有利也有弊吧。我没参加很多社团，结果大一社团活动最密集那会我拿到了大把的时间去学习，在室友都忙着招新等事宜的时候，我在那边啃C Primer Plus，在朋友去参加社团聚餐的时候，我在学蟒蛇书，大一那会说实话是我大学以来学习新知识最快的时候。但是另一方面，和室友一起走出去上课的时候，他们总是会碰到认识的学长，然后我就一个人背着包在路上茫然，讶然于路上千万面孔却无一人为我所知。不得不说，大学的社团真的是扩展社交圈子的一个重要手段，有大一些的关系圈的话别的不说，消息是真的比我灵通太多了（苦笑），那些有关德育分、创新学分的活动，大部分是往往在我根本不知道它已经举行了的情况下错过了。【反观一下我的社交圈……似乎就周围原来玩的比较好的那几个人吧，出了周围几个寝室我就也没啥认识的人了😅】 靠！这么写起来人突然就开始丧了！大学读了一年还多了，除了拿了一点微薄的奖学金我也再没什么别的成就了，天天宅在寝室里，也没能认识到几个人，把自己关在自己的世界里，不想社交，不想谈对象。晚上的时候我也总是想我这样是不是太佛系了，但是这么反思有什么用呢？懒狗不想改变是一定不会去改变的，我想我可能需要一个契机【可能受点刺激什么的】，但是这个契机又会在什么时候出现呢。 害，这段话就当成我在这个博客放的第一个随笔吧。反正也是记录生活，写给自己看，高兴就好了！ 我计划过几天出一次教程，内容是关于我是怎么建立起这个站点的。 嗷对，国庆节那会我非常巧妙的结实了一个新朋友，有机会的话我也会再写写和他的故事。 回见~","categories":[{"name":"Essay","slug":"Essay","permalink":"https://legr4ndk.github.io/categories/Essay/"}],"tags":[{"name":"随想","slug":"随想","permalink":"https://legr4ndk.github.io/tags/%E9%9A%8F%E6%83%B3/"}]},{"title":"C语言数字、指针、布尔值灵活利用的典范","slug":"TheCLanguageIsSoNB","date":"2020-10-16T16:12:19.000Z","updated":"2020-10-16T16:38:50.689Z","comments":true,"path":"2020/10/17/TheCLanguageIsSoNB/","link":"","permalink":"https://legr4ndk.github.io/2020/10/17/TheCLanguageIsSoNB/","excerpt":"","text":"先思考这个问题，假设我有一组数，我需要在每两个数字中间加入一个空格然后再输出出来，末尾和头部都没有空格，应该如何实现。 实现方法很简单，加个if就可以实现了，比如我想输出1 2 3 4 5 6，就可以这样： #include&lt;stdio.h&gt;int main()&#123; int arr[6] = &#123; 1, 2, 3, 4, 5, 6 &#125;; for (int i = 0; i &lt; 6; i++) &#123; if (i == 5) //输出到最后一个数字了 printf(&quot;%d&quot;, arr[i]); else printf(&quot;%d &quot;, arr[i]); &#125; return 0; 我们利用一个if语句来判断是否输出到最后一个数字，来选择是否输出占位的空格。事实上，也可以对第一个数字特殊对待，然后剩余数据输出时附带一个空格。 但是如果我们这么做呢： #include&lt;stdio.h&gt;int main()&#123; int arr[6] = &#123; 1, 2, 3, 4, 5, 6 &#125;; for (int i = 0; i &lt; 6; i++) printf(&quot; %d&quot; + !i, arr[i]); return 0;&#125; 极其简单的几句话完成了我们之前要的操作，一气呵成。 我详细叙述下它的过程： 玄机在于printf语句的那个加法上。C语言的字符串常量作参数，实际上是一个指向常量池中该字符串的指针，也就是可以进行运算。然后就是一个!i，这是把C语言中的整型数据当布尔值来看待，对他取非。当循环第一趟时，i=0，0在C语言中是false，非i得到true，默认为1，当那个指针+1，指针就从原来的指向空格，变成指向“%d”，那么就不会输出空格。而当之后几轮时，i均为非0数，C语言中为true，那么取非则得到false，即0，那么原指针+0，就是它本身，也就会正常输出空格，最后达到我们的要求。 这种写法说实话有很大局限性，可读性也极差，但是却很好的体现了C语言的灵活之处。C语言对数据和内存的操作极为灵活，这就要求使用者有很高的水平。这种写法不推荐在正式的程序设计中使用，但是对于开拓思维、优化程序是很有帮助的。","categories":[{"name":"C/C++","slug":"C-C","permalink":"https://legr4ndk.github.io/categories/C-C/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"https://legr4ndk.github.io/tags/C-C/"}]},{"title":"Use git to push your code to your Github's repository","slug":"GitPushBriefIntroduction","date":"2020-10-16T15:45:05.000Z","updated":"2020-10-17T12:34:49.666Z","comments":true,"path":"2020/10/16/GitPushBriefIntroduction/","link":"","permalink":"https://legr4ndk.github.io/2020/10/16/GitPushBriefIntroduction/","excerpt":"","text":"First things first,install git. ——Stop BBing if you have not even installed the git. Install git(may need root permission) Ubuntu/Debian/Deepin: apt install git Arch/Manjaro:pacman -S git Free BSD:pkg install git macOS:brew install git Windows:Click HERE to download the installer Run git –version to make sure that git is installed on your device. Put your codes to a folder and initializeNow you can copy+paste all your code that need to be pushed to the Github in your new folder.Then run a terminal in this folder. Using git init to initial your local repository. And do not forget to add a new repository in your Github account.Once you added a new repository to your Github,you will get a repository-link just like this: https://github.com/YourGithubID/YourRepoName.git Now,run git remote add origin $YourRepoLink to link your remote repository to the local one. Add your files to staging areaUse git add $Filename to add the files you need to staging area. Or you can use git add . (THERE IS A DOT AT THE END) to add all your files。 Then run git status to check the files in your local repository. Run git commit -m ‘$YourCommits’ to add some commits to this submit. Push your code to GithubFirst of all,use git pull origin master to pull your online repository. Use git push origin master to submit your files to Github. There are some cases that you will meet the ERROR that refusing to merge unrelated histories when you pull.You can try git pull origin master –allow-unrelated-histories to allow merging two unrelated branches.(At the first time,the online repository is empty but the local one have some files,so of course they are unrelated). Now you can check your new repository on the Github. Done,enjoy.","categories":[{"name":"Git","slug":"Git","permalink":"https://legr4ndk.github.io/categories/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://legr4ndk.github.io/tags/git/"}]},{"title":"命名规则与驼峰命名法","slug":"NamingRuleAndCamelCase","date":"2020-10-16T13:44:37.000Z","updated":"2020-10-16T14:03:21.625Z","comments":true,"path":"2020/10/16/NamingRuleAndCamelCase/","link":"","permalink":"https://legr4ndk.github.io/2020/10/16/NamingRuleAndCamelCase/","excerpt":"","text":"还在使用x，y，z，a，b，c等无意义字符做变量名嘛？还因为把变量命名位g，s，b而遭到同学的嘲笑嘛？还因为不知道怎么命名变量能做的更直观嘛？ ——Introducing Camel-Case：驼峰命名法 我们现在先来看看一个例子： 假如我们想要定义一个变量存储我们的名字，该怎么命名呢？ mylastname 构成这个变量名的所有字母都通过小写被粗暴地整合在了一起，很难一眼看清，对吧？这种变量命名方法明显地降低了代码的可读性。要不，我们拆分一下单词？ my_last_mane 显而易见地，这个变量名的可读性比上面那种高了很多，我们可以轻易地读出它的各个单词并且很清楚地知道它的意思。但是很显然，这不够紧凑，我们还得多打两个字符（吐槽下这下划线真的不是很好按）。 驼峰命名法驼峰命名法的命名规格极为形象，通过大小写像驼峰一样变换来实现单词的区分，更方便直观地表示变量名。 那我们来看看驼峰命名法该怎么用： myLastName 相比于前两种，驼峰命名法既直观又紧凑，保证了代码可读性的同时也兼顾了效率。 驼峰命名法的规则是这样的： 当变量名或函数名是由多个单词连结在一起，构成的唯一识别字时，每一节个单词的首字母都采用大写来区分，单词与单词之间不额外添加下划线。 而以第一个单词的首字母是否要大写为区分，我们又可以分成大驼峰法和小驼峰法。 大驼峰法：包括第一个单词在内的所有单词的首字母全部大写，如： MyLastName DataBaseUser 小驼峰法：第一个单词的首字母不大写，其余每个单词的首字母均大写，如： myLastName studentsAverageGrades 驼峰命名法就介绍到这里。 接下来再讲讲我使用的一种命名规则。 强烈建议使用英文命名！！！ 变量的命名规则变量名的命名，首先应该是这个变量要储存的内容的英文意思。借助你强大的英文水平，先把你想好的中文变量名翻译成英文，不会的话就借助翻译软件吧。 然后，如果你翻译出来的内容仅由1个英文单词构成，请直接以这个单词的完全小写的形式命名这个变量。如果是由多个单词组成的词组，应该使用小驼峰法的方式为这个变量命名。 记住，它应该是个名词或者名词性词组。 例如： salary,tax,carSum,taxRate; 特殊地，给布尔类型的变量命名，建议使用 is + 属性名的方法，依照具体的语境，也可以用can，have，should等前缀代替is，同样使用小驼峰法。同时要记得避免使用否定词。例如： isReal,isHigh;(√)isNotTall,isError;(×) 常量的命名规则常量一般是指使用const关键字修饰定义的数据，有时也只使用预处理宏#define定义的数据。 使用const关键字定义的常量它的命名规则和变量类似，但是要使用大驼峰法，即第一个单词的首字母也要大写。例如： Line,SavingAccount,Pi; 使用#define关键字宏定义的常量它的所有字母都应该采用大写，同时，若是由多个单词组成的变量名，为了区分每个单词，在每两个单词之间应该添加下划线。例如： PI,MAX_SIZE; 函数/方法的命名规则函数的名称应该是一个动词或者一个动词词组。如果函数名仅由单个单词构成，那么请以这个单词的完全小写形式命名这个函数。如果这个函数名是一个动词词组，请以小驼峰法的方式命名这个函数。例如： getArea,setPath,takeSteps; 名字空间的命名规则（C++）对于名字空间，请以一个英文单词完成对它的命名，而且，应该使用它的完全小写形式。例如： model,common; 结构、类（C++）的命名规则结构体和类的名称应该是一个名词或者名词性词组。若使用单个单词命名，请首字母大写；若使用词组，应使用大驼峰法命名。例如： Node,SomeClass; 但是，命名结构和类形成的实例（结构体和对象）时，应该依照一般的变量的命名法进行命名。 对于枚举类型（以enum关键词声明）同样建议使用名词或者名词性词组，以首字母大写或者大驼峰法命名。 而对于枚举类型的枚举常量，建议以全部大写字母+下划线分割单词的方式命名,同时应尽量使用共同的类型名作为前缀。 例如： enum Color &#123; COLOR_RED, COLOR_GREEN, COLOR_BLUE &#125;;enum ColorType &#123; COLOR_TYPE_WARM, COLOR_TYPE_COLD &#125;; 额外再提几个用于命名的关键字以及技巧，让代码更直观 get应该用在直接取得已设定值的函数中。 set应该用在直接为变量设定值的函数中。 compute应该用在用于进行计算的函数中。 find应该用在用于查找的函数中。 init/initialize应该使用在用于初始化的函数中。 在需要标识序号的变量名中，使用No + 序号比较合适。 布尔变量的命名应使用is，has等前缀，并且尽量避免否定词。 循环变量建议设置为i，j，k，并且建议优先使用i而把j，k用于循环嵌套。 对于缩略词我们有两种态度：1、对于那种缩写了人家可能就看不懂了的，比如cmd，init，请不要用缩写代替他们。2、对于那种缩写认识展开别人就看不懂的，比如HTML，CPU，老老实实写缩写。 另外，对于自己写的头文件的命名，推荐使用大驼峰命名法。例如 MyClass.hCppFunction.h OK,有关命名方法先写这么多。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://legr4ndk.github.io/categories/Programming/"}],"tags":[{"name":"CamelCase","slug":"CamelCase","permalink":"https://legr4ndk.github.io/tags/CamelCase/"}]},{"title":"Hello World","slug":"HelloWorld","date":"2020-10-15T14:30:10.810Z","updated":"2020-10-16T16:06:04.742Z","comments":true,"path":"2020/10/15/HelloWorld/","link":"","permalink":"https://legr4ndk.github.io/2020/10/15/HelloWorld/","excerpt":"","text":"Hello World 哈哈哈今天布置了一个github上的Hexo静态站点 准备下次写个教程（flag插好） 这次我整了两个分部，gitee和github上面我都有布置 不得不吐槽一下gitee page 是真的难用，每次更新居然要去手动刷新，时效性还特么巨低 github就是GFW的锅了，太慢了太慢了，移动甚至都不让你上去 害，这边主要搬运一些之前写在别处的文章 还有随时想写的感想，所以不能算是纯技术类博客吧 （所以这站点名字叫QQ空间哈哈哈哈） 等我更新！ 宰🕊祭天","categories":[],"tags":[]}],"categories":[{"name":"Programming","slug":"Programming","permalink":"https://legr4ndk.github.io/categories/Programming/"},{"name":"Git","slug":"Git","permalink":"https://legr4ndk.github.io/categories/Git/"},{"name":"Essay","slug":"Essay","permalink":"https://legr4ndk.github.io/categories/Essay/"},{"name":"C/C++","slug":"C-C","permalink":"https://legr4ndk.github.io/categories/C-C/"}],"tags":[{"name":"git","slug":"git","permalink":"https://legr4ndk.github.io/tags/git/"},{"name":"随想","slug":"随想","permalink":"https://legr4ndk.github.io/tags/%E9%9A%8F%E6%83%B3/"},{"name":"C/C++","slug":"C-C","permalink":"https://legr4ndk.github.io/tags/C-C/"},{"name":"CamelCase","slug":"CamelCase","permalink":"https://legr4ndk.github.io/tags/CamelCase/"}]}